# -*- coding: utf-8 -*-
"""23_To_Send_to_Marcela.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-3U5Xs5Q2z_cNj1qHEo2aX-fq5SzEIT_
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
import pandas as pd
import io
import pandas as pd
from IPython.display import display
import matplotlib.pyplot as plt
# %matplotlib inline
import numpy as np
import os
import shutil
import posixpath
import urllib.request
import datetime
from collections import namedtuple

pd.set_option('display.max_rows', 50000)
pd.set_option('display.max_columns', 50)
pd.set_option('display.width', 1000)
pd.set_option('max_colwidth', 800)

"""# **RAW DATA**"""

drive.mount('/content/gdrive')

# Download All Time series data for 404 patients.

df_all251_withTemp = pd.read_csv('/content/gdrive/My Drive/Master thesis/df_ts_records_all251SepsisPatients(lessThan20%Missing)_sepsisOnsetPlus31h_WITH_TEMP_SOFA.csv')
df_all251_withTemp['TIME'] =  pd.to_datetime(df_all251_withTemp['TIME'])
print(df_all251_withTemp.shape)
print(df_all251_withTemp.columns)


df_all251_withTemp_cleaned_MVimputed = df_all251_withTemp

from google.colab import files
uploaded = files.upload()

df_icutime = pd.read_csv(io.BytesIO(uploaded['2_Only_AllSepsisPatients_with_%MissingData_sepsisOnset+31_fluid+26.csv']))
print (df_icutime.columns)
#df_icutime = df_icutime[['subject_id','icustay_id','intime','outtime','sepsis_onsettime']]
#print (df_icutime.columns)
"""
df_icutime['intime'] =  pd.to_datetime(df_icutime['intime'])
df_icutime['outtime'] =  pd.to_datetime(df_icutime['outtime'])
"""

subject_ids=[55638]

# shock patients
icustay_id,  subject_id,    sepsis_onsettime,      sepsis_onsettime + interval '31' hour
222248,     48351,      2107-10-23 23:30:00,    2107-10-25 06:30:00.000000
223663,     82055,      2185-03-08 16:39:00,    2185-03-09 23:39:00.000000
223754,     86531,      2105-06-30 19:22:00,    2105-07-02 02:22:00.000000
224498,     98046,      2198-07-25 15:09:00,    2198-07-26 22:09:00.000000
225121,     72455,      2115-01-21 14:17:00,    2115-01-22 21:17:00.000000
225484,     69157,      2158-01-09 17:10:00,    2158-01-11 00:10:00.000000
230605,     81103,      2163-08-24 21:10:00,    2163-08-26 04:10:00.000000
233981,     98769,      2125-02-23 03:25:00,    2125-02-24 10:25:00.000000



#non shock patients\

218175,   70514,        2125-05-13 23:55:00,2125-05-15 06:55:00.000000
218447,   99366,        2197-03-20 22:13:00,2197-03-22 05:13:00.000000
219068,   88809,        2134-01-11 16:55:00,2134-01-12 23:55:00.000000
220058,   77975,        2129-05-23 13:40:00,2129-05-24 20:40:00.000000
220949,   44600,        2115-10-31 22:56:00,2115-11-02 05:56:00.000000
222348,   42397,        2141-12-11 07:22:00,2141-12-12 14:22:00.000000
222450,   45805,        2137-03-23 16:09:00,2137-03-24 23:09:00.000000
224390,   55638,        2106-11-25 16:45:00,2106-11-26 23:45:00.000000

temp_feature_cols= ['TIME',
               'HR',
               'RESP',
               'ABPSYS',
               'ABPDIAS',
               'ABPMEAN',
               'SPO2',
               'TEMP',
               'SOFA_SCORE',
               'RESP_SOFA', 
               'LIVER_SOFA', 
               'RENAL_SOFA', 
               'CARDIO_SOFA', 
               'CNS_SOFA', 
               'COAG_SOFA'
               ] 

feature_cols = [
               'HR',
               'RESP',
               'ABPSYS',
               'ABPDIAS',
               'ABPMEAN',
               'SPO2',
               'TEMP',
               'SOFA_SCORE',
               'RESP_SOFA', 
               'LIVER_SOFA', 
               'RENAL_SOFA', 
               'CARDIO_SOFA', 
               'CNS_SOFA', 
               'COAG_SOFA',
               'HAS_SHOCK',
               'ICUSTAY_ID',
                'SUBJECT_ID' ,
                'SEPSIS_ONSETTIME',
                'SEPSIS_SHOCK_ONSETTIME']

df_features.drop(df_features.index, inplace=True)

df_features =pd.DataFrame(columns=feature_cols);
for subject_id in subject_ids:
  #curr_idx = df_features.shape[0]

  icu_intime = df_icutime.loc[df_icutime.subject_id==subject_id , 'intime'].values[0]
  sepsis_onsettime = df_icutime.loc[df_icutime.subject_id==subject_id , 'sepsis_onsettime'].values[0]
  shock_onsetttime = df_icutime.loc[df_icutime.subject_id==subject_id , 'sepstic_shock_onsettime'].values[0]
  print('SHOCK ONSET TIME : ', shock_onsetttime)
  icustay_id = df_icutime.loc[df_icutime.subject_id==subject_id , 'icustay_id'].values[0]

  df_tsdata_subjectid_entire_31h = df_all251_withTemp_cleaned_MVimputed[(df_all251_withTemp_cleaned_MVimputed['SUBJECT_ID'] == subject_id) & ( ( df_all251_withTemp_cleaned_MVimputed['TIME'] >= datetime.datetime.strptime(sepsis_onsettime,'%Y-%m-%d %H:%M:%S')    ) & ( df_all251_withTemp_cleaned_MVimputed['TIME'] <= (datetime.datetime.strptime(sepsis_onsettime,'%Y-%m-%d %H:%M:%S') + datetime.timedelta(hours=31)) )  )]
  
  first_row = df_tsdata_subjectid_entire_31h.iloc[0,:]
  
  base_min = int(first_row['TIME'].strftime('%M') )

  
  #df_tsdata_subjectid_entire_31h = df_tsdata_subjectid_entire_31h.set_index("TIME")
  df_tsdata_subjectid_entire_31h = df_tsdata_subjectid_entire_31h[temp_feature_cols]
  
  #print(df_tsdata_subjectid_entire_31h)
  

  df_features_temp = df_tsdata_subjectid_entire_31h.resample('60min',base=base_min,  on='TIME').mean()
  df_features_temp['ICUSTAY_ID'] = icustay_id
  df_features_temp['SUBJECT_ID'] = subject_id
  df_features_temp['SEPSIS_ONSETTIME'] = sepsis_onsettime
  df_features_temp['SEPSIS_SHOCK_ONSETTIME'] = shock_onsetttime

  if str(shock_onsetttime)!='nan':
    df_features_temp.loc[df_features_temp.index < shock_onsetttime , 'HAS_SHOCK'] = 0
    df_features_temp.loc[df_features_temp.index >= shock_onsetttime , 'HAS_SHOCK'] = 1
  else:
    df_features_temp['HAS_SHOCK'] = 0
  #print(df_features_temp)

  

  
  #print(df_features_temp)

  #df_features = df_features.append(df_features_temp, ignore_index=True);
  df_features = df_features.append(df_features_temp);
  print(df_features)

  icustay_id='';
  sepsis_onsettime='';
  shock_onsetttime = '';
  base_min = '';
  df_tsdata_subjectid_entire_31h.drop(df_tsdata_subjectid_entire_31h.index, inplace=True)  
  df_features_temp.drop(df_features_temp.index, inplace=True)  



  

  """
  df_features.loc[curr_idx,'SUBJECT_ID'] = subject_id
  df_features.loc[curr_idx,'SEPSIS_ONSETTIME'] = sepsis_onsettime
  df_features.loc[curr_idx,'SEPSIS_SHOCK_ONSETTIME'] = shock_onsetttime
  """
  """
  if str(shock_onsetttime) != 'nan':
    df_features.loc[curr_idx,'HAS_SHOCK'] = 1
  else:
    df_features.loc[curr_idx,'HAS_SHOCK'] = 0
  """

  
  # CALCULATING MEANS for ENTIRE 31 hours of data i.e. from sepsis onset time till sepsis onset time + 31 h
  """
  df_features.loc[curr_idx,'HR_MEAN_31'] =  df_tsdata_subjectid_entire_31h['HR'].rolling(window=60,min_periods =1).mean()
  df_features.loc[curr_idx,'RESP_MEAN_31'] = df_tsdata_subjectid_entire_31h['RESP'].rolling(window=60,min_periods =1).mean()
  df_features.loc[curr_idx,'ABPSYS_MEAN_31'] = df_tsdata_subjectid_entire_31h['ABPSYS'].rolling(window=60,min_periods =1).mean()
  df_features.loc[curr_idx,'ABPDIAS_MEAN_31'] = df_tsdata_subjectid_entire_31h['ABPDIAS'].rolling(window=60,min_periods =1).mean()
  df_features.loc[curr_idx,'ABPMEAN_MEAN_31'] = df_tsdata_subjectid_entire_31h['ABPMEAN'].rolling(window=60,min_periods =1).mean()
  df_features.loc[curr_idx,'SPO2_MEAN_31'] = df_tsdata_subjectid_entire_31h['SPO2'].rolling(window=60,min_periods =1).mean()
  df_features.loc[curr_idx,'TEMP_MEAN_31'] = df_tsdata_subjectid_entire_31h['TEMP'].rolling(window=60,min_periods =1).mean()


  
  

  icu_intime='';
  sepsis_onsettime='';
  shock_onsetttime = '';
  df_tsdata_subjectid_first_10h.drop(df_tsdata_subjectid_first_10h.index, inplace=True)
  df_tsdata_subjectid_first_20h.drop(df_tsdata_subjectid_first_20h.index, inplace=True) 
  df_tsdata_subjectid_entire_31h.drop(df_tsdata_subjectid_entire_31h.index, inplace=True)  
  #print(df_features)
  """

df_features.to_csv ('Raw_TS_NON_shock_subjectID_55638.csv', sep=',', index = True, header=True);

from google.colab import files
files.download('Raw_TS_NON_shock_subjectID_55638.csv')

"""# **Cleaned and missing values imputed.  Please retsart the run time and run the below code**"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
import pandas as pd
import io
import pandas as pd
from IPython.display import display
import matplotlib.pyplot as plt
# %matplotlib inline
import numpy as np
import os
import shutil
import posixpath
import urllib.request
import datetime
from collections import namedtuple

pd.set_option('display.max_rows', 50000)
pd.set_option('display.max_columns', 50)
pd.set_option('display.width', 1000)
pd.set_option('max_colwidth', 800)

drive.mount('/content/gdrive')

# Download All Time series data for 404 patients.

df_all251_withTemp = pd.read_csv('/content/gdrive/My Drive/Master thesis/df_ts_records_all251SepsisPatients(lessThan20%Missing)_sepsisOnsetPlus31h_WITH_TEMP_SOFA.csv')
df_all251_withTemp['TIME'] =  pd.to_datetime(df_all251_withTemp['TIME'])
print(df_all251_withTemp.shape)
print(df_all251_withTemp.columns)

#cleaning data :  removing all negative values

df_all251_withTemp.HR = df_all251_withTemp.HR.mask(df_all251_withTemp.HR < 0)

df_all251_withTemp.RESP = df_all251_withTemp.RESP.mask(df_all251_withTemp.RESP < 0)

df_all251_withTemp.ABPSYS = df_all251_withTemp.ABPSYS.mask(df_all251_withTemp.ABPSYS < 0)

df_all251_withTemp.ABPDIAS = df_all251_withTemp.ABPDIAS.mask(df_all251_withTemp.ABPDIAS < 0)

df_all251_withTemp.ABPMEAN = df_all251_withTemp.ABPMEAN.mask(df_all251_withTemp.ABPMEAN < 0)

df_all251_withTemp.SPO2 = df_all251_withTemp.SPO2.mask(df_all251_withTemp.SPO2 < 0)

df_all251_withTemp.TEMP = df_all251_withTemp.TEMP.mask(df_all251_withTemp.TEMP < 0)

df_all251_withTemp.SOFA_SCORE = df_all251_withTemp.SOFA_SCORE.mask(df_all251_withTemp.SOFA_SCORE < 0)


df_all251_withTemp.RESP_SOFA = df_all251_withTemp.RESP_SOFA.mask(df_all251_withTemp.RESP_SOFA < 0)


df_all251_withTemp.LIVER_SOFA = df_all251_withTemp.LIVER_SOFA.mask(df_all251_withTemp.LIVER_SOFA < 0)


df_all251_withTemp.RENAL_SOFA = df_all251_withTemp.RENAL_SOFA.mask(df_all251_withTemp.RENAL_SOFA < 0)


df_all251_withTemp.CARDIO_SOFA = df_all251_withTemp.CARDIO_SOFA.mask(df_all251_withTemp.CARDIO_SOFA < 0)


df_all251_withTemp.CNS_SOFA = df_all251_withTemp.CNS_SOFA.mask(df_all251_withTemp.CNS_SOFA < 0)


df_all251_withTemp.COAG_SOFA = df_all251_withTemp.COAG_SOFA.mask(df_all251_withTemp.COAG_SOFA < 0)

# Missing value imputation by carry forward scheme
df_all251_withTemp_cleaned_MVimputed = df_all251_withTemp.ffill().bfill()

df_all251_withTemp_cleaned_MVimputed.HR = df_all251_withTemp_cleaned_MVimputed.HR.round(decimals=4)
df_all251_withTemp_cleaned_MVimputed.RESP = df_all251_withTemp_cleaned_MVimputed.RESP.round(decimals=4)
df_all251_withTemp_cleaned_MVimputed.ABPSYS = df_all251_withTemp_cleaned_MVimputed.ABPSYS.round(decimals=4)
df_all251_withTemp_cleaned_MVimputed.ABPDIAS = df_all251_withTemp_cleaned_MVimputed.ABPDIAS.round(decimals=4)
df_all251_withTemp_cleaned_MVimputed.ABPMEAN = df_all251_withTemp_cleaned_MVimputed.ABPMEAN.round(decimals=4)
df_all251_withTemp_cleaned_MVimputed.SPO2 = df_all251_withTemp_cleaned_MVimputed.SPO2.round(decimals=4)
df_all251_withTemp_cleaned_MVimputed.TEMP = df_all251_withTemp_cleaned_MVimputed.TEMP.round(decimals=4)
df_all251_withTemp_cleaned_MVimputed.SOFA_SCORE = df_all251_withTemp_cleaned_MVimputed.SOFA_SCORE.round(decimals=4)

df_all251_withTemp_cleaned_MVimputed.RENAL_SOFA = df_all251_withTemp_cleaned_MVimputed.RENAL_SOFA.round(decimals=4)

df_all251_withTemp_cleaned_MVimputed.LIVER_SOFA = df_all251_withTemp_cleaned_MVimputed.LIVER_SOFA.round(decimals=4)

df_all251_withTemp_cleaned_MVimputed.COAG_SOFA = df_all251_withTemp_cleaned_MVimputed.COAG_SOFA.round(decimals=4)

df_all251_withTemp_cleaned_MVimputed.CARDIO_SOFA = df_all251_withTemp_cleaned_MVimputed.CARDIO_SOFA.round(decimals=4)

df_all251_withTemp_cleaned_MVimputed.CNS_SOFA = df_all251_withTemp_cleaned_MVimputed.CNS_SOFA.round(decimals=4)

df_all251_withTemp_cleaned_MVimputed.RESP_SOFA = df_all251_withTemp_cleaned_MVimputed.RESP_SOFA.round(decimals=4)



df_all251_withTemp_cleaned_MVimputed['TIME'] =  pd.to_datetime(df_all251_withTemp_cleaned_MVimputed['TIME'])

from google.colab import files
uploaded = files.upload()

df_icutime = pd.read_csv(io.BytesIO(uploaded['2_Only_AllSepsisPatients_with_%MissingData_sepsisOnset+31_fluid+26.csv']))
print (df_icutime.columns)
#df_icutime = df_icutime[['subject_id','icustay_id','intime','outtime','sepsis_onsettime']]
#print (df_icutime.columns)
"""
df_icutime['intime'] =  pd.to_datetime(df_icutime['intime'])
df_icutime['outtime'] =  pd.to_datetime(df_icutime['outtime'])
"""

subject_ids=[55638]

# shock patients
icustay_id,  subject_id,    sepsis_onsettime,      sepsis_onsettime + interval '31' hour
222248,     48351,      2107-10-23 23:30:00,    2107-10-25 06:30:00.000000
223663,     82055,      2185-03-08 16:39:00,    2185-03-09 23:39:00.000000
223754,     86531,      2105-06-30 19:22:00,    2105-07-02 02:22:00.000000
224498,     98046,      2198-07-25 15:09:00,    2198-07-26 22:09:00.000000
225121,     72455,      2115-01-21 14:17:00,    2115-01-22 21:17:00.000000
225484,     69157,      2158-01-09 17:10:00,    2158-01-11 00:10:00.000000
230605,     81103,      2163-08-24 21:10:00,    2163-08-26 04:10:00.000000
233981,     98769,      2125-02-23 03:25:00,    2125-02-24 10:25:00.000000



#non shock patients\

218175,   70514,        2125-05-13 23:55:00,2125-05-15 06:55:00.000000
218447,   99366,        2197-03-20 22:13:00,2197-03-22 05:13:00.000000
219068,   88809,        2134-01-11 16:55:00,2134-01-12 23:55:00.000000
220058,   77975,        2129-05-23 13:40:00,2129-05-24 20:40:00.000000
220949,   44600,        2115-10-31 22:56:00,2115-11-02 05:56:00.000000
222348,   42397,        2141-12-11 07:22:00,2141-12-12 14:22:00.000000
222450,   45805,        2137-03-23 16:09:00,2137-03-24 23:09:00.000000
224390,   55638,        2106-11-25 16:45:00,2106-11-26 23:45:00.000000

temp_feature_cols= ['TIME',
               'HR',
               'RESP',
               'ABPSYS',
               'ABPDIAS',
               'ABPMEAN',
               'SPO2',
               'TEMP',
               'SOFA_SCORE',
               'RESP_SOFA', 
               'LIVER_SOFA', 
               'RENAL_SOFA', 
               'CARDIO_SOFA', 
               'CNS_SOFA', 
               'COAG_SOFA'
               ] 

feature_cols = [
               'HR',
               'RESP',
               'ABPSYS',
               'ABPDIAS',
               'ABPMEAN',
               'SPO2',
               'TEMP',
               'SOFA_SCORE',
               'RESP_SOFA', 
               'LIVER_SOFA', 
               'RENAL_SOFA', 
               'CARDIO_SOFA', 
               'CNS_SOFA', 
               'COAG_SOFA',
               'HAS_SHOCK',
               'ICUSTAY_ID',
                'SUBJECT_ID' ,
                'SEPSIS_ONSETTIME',
                'SEPSIS_SHOCK_ONSETTIME']

df_features.drop(df_features.index, inplace=True)

df_features =pd.DataFrame(columns=feature_cols);
for subject_id in subject_ids:
  #curr_idx = df_features.shape[0]

  icu_intime = df_icutime.loc[df_icutime.subject_id==subject_id , 'intime'].values[0]
  sepsis_onsettime = df_icutime.loc[df_icutime.subject_id==subject_id , 'sepsis_onsettime'].values[0]
  shock_onsetttime = df_icutime.loc[df_icutime.subject_id==subject_id , 'sepstic_shock_onsettime'].values[0]
  print('SHOCK ONSET TIME : ', shock_onsetttime)
  icustay_id = df_icutime.loc[df_icutime.subject_id==subject_id , 'icustay_id'].values[0]

  df_tsdata_subjectid_entire_31h = df_all251_withTemp_cleaned_MVimputed[(df_all251_withTemp_cleaned_MVimputed['SUBJECT_ID'] == subject_id) & ( ( df_all251_withTemp_cleaned_MVimputed['TIME'] >= datetime.datetime.strptime(sepsis_onsettime,'%Y-%m-%d %H:%M:%S')    ) & ( df_all251_withTemp_cleaned_MVimputed['TIME'] <= (datetime.datetime.strptime(sepsis_onsettime,'%Y-%m-%d %H:%M:%S') + datetime.timedelta(hours=31)) )  )]
  
  first_row = df_tsdata_subjectid_entire_31h.iloc[0,:]
  
  base_min = int(first_row['TIME'].strftime('%M') )

  
  #df_tsdata_subjectid_entire_31h = df_tsdata_subjectid_entire_31h.set_index("TIME")
  df_tsdata_subjectid_entire_31h= df_tsdata_subjectid_entire_31h[temp_feature_cols]
  
  #print(df_tsdata_subjectid_entire_31h)
  

  df_features_temp = df_tsdata_subjectid_entire_31h.resample('60min',base=base_min,  on='TIME').mean()
  df_features_temp['ICUSTAY_ID'] = icustay_id
  df_features_temp['SUBJECT_ID'] = subject_id
  df_features_temp['SEPSIS_ONSETTIME'] = sepsis_onsettime
  df_features_temp['SEPSIS_SHOCK_ONSETTIME'] = shock_onsetttime

  if str(shock_onsetttime)!='nan':
    df_features_temp.loc[df_features_temp.index < shock_onsetttime , 'HAS_SHOCK'] = 0
    df_features_temp.loc[df_features_temp.index >= shock_onsetttime , 'HAS_SHOCK'] = 1
  else:
    df_features_temp['HAS_SHOCK'] = 0
  #print(df_features_temp)

  

  
  #print(df_features_temp)

  #df_features = df_features.append(df_features_temp, ignore_index=True);
  df_features = df_features.append(df_features_temp);
  print(df_features)

  icustay_id='';
  sepsis_onsettime='';
  shock_onsetttime = '';
  base_min = '';
  df_tsdata_subjectid_entire_31h.drop(df_tsdata_subjectid_entire_31h.index, inplace=True)  
  df_features_temp.drop(df_features_temp.index, inplace=True)  



  

  """
  df_features.loc[curr_idx,'SUBJECT_ID'] = subject_id
  df_features.loc[curr_idx,'SEPSIS_ONSETTIME'] = sepsis_onsettime
  df_features.loc[curr_idx,'SEPSIS_SHOCK_ONSETTIME'] = shock_onsetttime
  """
  """
  if str(shock_onsetttime) != 'nan':
    df_features.loc[curr_idx,'HAS_SHOCK'] = 1
  else:
    df_features.loc[curr_idx,'HAS_SHOCK'] = 0
  """

  
  # CALCULATING MEANS for ENTIRE 31 hours of data i.e. from sepsis onset time till sepsis onset time + 31 h
  """
  df_features.loc[curr_idx,'HR_MEAN_31'] =  df_tsdata_subjectid_entire_31h['HR'].rolling(window=60,min_periods =1).mean()
  df_features.loc[curr_idx,'RESP_MEAN_31'] = df_tsdata_subjectid_entire_31h['RESP'].rolling(window=60,min_periods =1).mean()
  df_features.loc[curr_idx,'ABPSYS_MEAN_31'] = df_tsdata_subjectid_entire_31h['ABPSYS'].rolling(window=60,min_periods =1).mean()
  df_features.loc[curr_idx,'ABPDIAS_MEAN_31'] = df_tsdata_subjectid_entire_31h['ABPDIAS'].rolling(window=60,min_periods =1).mean()
  df_features.loc[curr_idx,'ABPMEAN_MEAN_31'] = df_tsdata_subjectid_entire_31h['ABPMEAN'].rolling(window=60,min_periods =1).mean()
  df_features.loc[curr_idx,'SPO2_MEAN_31'] = df_tsdata_subjectid_entire_31h['SPO2'].rolling(window=60,min_periods =1).mean()
  df_features.loc[curr_idx,'TEMP_MEAN_31'] = df_tsdata_subjectid_entire_31h['TEMP'].rolling(window=60,min_periods =1).mean()


  
  

  icu_intime='';
  sepsis_onsettime='';
  shock_onsetttime = '';
  df_tsdata_subjectid_first_10h.drop(df_tsdata_subjectid_first_10h.index, inplace=True)
  df_tsdata_subjectid_first_20h.drop(df_tsdata_subjectid_first_20h.index, inplace=True) 
  df_tsdata_subjectid_entire_31h.drop(df_tsdata_subjectid_entire_31h.index, inplace=True)  
  #print(df_features)
  """

df_features.to_csv ('Cleaned+MVimputed_TS_NON_shock_subjectID_55638.csv', sep=',', index = True, header=True);

from google.colab import files
files.download('Cleaned+MVimputed_TS_NON_shock_subjectID_55638.csv')