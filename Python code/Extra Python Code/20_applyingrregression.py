# -*- coding: utf-8 -*-
"""20_ApplyingrRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u8-1llg7sJslx0TN-8YDbKSqMjAC6VnZ
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
import pandas as pd
import io
import pandas as pd
from IPython.display import display
import matplotlib.pyplot as plt
# %matplotlib inline
import numpy as np
import os
import shutil
import posixpath
import urllib.request
import datetime
from collections import namedtuple
"""
pd.set_option('display.max_rows', 50000)
pd.set_option('display.max_columns', 50)
pd.set_option('display.width', 1000)
pd.set_option('max_colwidth', 800)
"""

drive.mount('/content/gdrive')

# Download All Time series data for 404 patients.

df_all251_withTemp = pd.read_csv('/content/gdrive/My Drive/Master thesis/df_ts_records_all251SepsisPatients(lessThan20%Missing)_sepsisOnsetPlus31h_WITH_TEMP_SOFA.csv')
df_all251_withTemp['TIME'] =  pd.to_datetime(df_all251_withTemp['TIME'])
print(df_all251_withTemp.shape)
print(df_all251_withTemp.columns)

#cleaning data :  removing all negative values

df_all251_withTemp.HR = df_all251_withTemp.HR.mask(df_all251_withTemp.HR < 0)

df_all251_withTemp.RESP = df_all251_withTemp.RESP.mask(df_all251_withTemp.RESP < 0)

df_all251_withTemp.ABPSYS = df_all251_withTemp.ABPSYS.mask(df_all251_withTemp.ABPSYS < 0)

df_all251_withTemp.ABPDIAS = df_all251_withTemp.ABPDIAS.mask(df_all251_withTemp.ABPDIAS < 0)

df_all251_withTemp.ABPMEAN = df_all251_withTemp.ABPMEAN.mask(df_all251_withTemp.ABPMEAN < 0)

df_all251_withTemp.SPO2 = df_all251_withTemp.SPO2.mask(df_all251_withTemp.SPO2 < 0)

df_all251_withTemp.TEMP = df_all251_withTemp.TEMP.mask(df_all251_withTemp.TEMP < 0)

df_all251_withTemp.SOFA_SCORE = df_all251_withTemp.SOFA_SCORE.mask(df_all251_withTemp.SOFA_SCORE < 0)


df_all251_withTemp.RESP_SOFA = df_all251_withTemp.RESP_SOFA.mask(df_all251_withTemp.RESP_SOFA < 0)


df_all251_withTemp.LIVER_SOFA = df_all251_withTemp.LIVER_SOFA.mask(df_all251_withTemp.LIVER_SOFA < 0)


df_all251_withTemp.RENAL_SOFA = df_all251_withTemp.RENAL_SOFA.mask(df_all251_withTemp.RENAL_SOFA < 0)


df_all251_withTemp.CARDIO_SOFA = df_all251_withTemp.CARDIO_SOFA.mask(df_all251_withTemp.CARDIO_SOFA < 0)


df_all251_withTemp.CNS_SOFA = df_all251_withTemp.CNS_SOFA.mask(df_all251_withTemp.CNS_SOFA < 0)


df_all251_withTemp.COAG_SOFA = df_all251_withTemp.COAG_SOFA.mask(df_all251_withTemp.COAG_SOFA < 0)

# Missing value imputation by carry forward scheme
df_all251_withTemp_cleaned_MVimputed = df_all251_withTemp.ffill().bfill()

df_all251_withTemp_cleaned_MVimputed.HR = df_all251_withTemp_cleaned_MVimputed.HR.round(decimals=4)
df_all251_withTemp_cleaned_MVimputed.RESP = df_all251_withTemp_cleaned_MVimputed.RESP.round(decimals=4)
df_all251_withTemp_cleaned_MVimputed.ABPSYS = df_all251_withTemp_cleaned_MVimputed.ABPSYS.round(decimals=4)
df_all251_withTemp_cleaned_MVimputed.ABPDIAS = df_all251_withTemp_cleaned_MVimputed.ABPDIAS.round(decimals=4)
df_all251_withTemp_cleaned_MVimputed.ABPMEAN = df_all251_withTemp_cleaned_MVimputed.ABPMEAN.round(decimals=4)
df_all251_withTemp_cleaned_MVimputed.SPO2 = df_all251_withTemp_cleaned_MVimputed.SPO2.round(decimals=4)
df_all251_withTemp_cleaned_MVimputed.TEMP = df_all251_withTemp_cleaned_MVimputed.TEMP.round(decimals=4)
df_all251_withTemp_cleaned_MVimputed.SOFA_SCORE = df_all251_withTemp_cleaned_MVimputed.SOFA_SCORE.round(decimals=4)

df_all251_withTemp_cleaned_MVimputed.RENAL_SOFA = df_all251_withTemp_cleaned_MVimputed.RENAL_SOFA.round(decimals=4)

df_all251_withTemp_cleaned_MVimputed.LIVER_SOFA = df_all251_withTemp_cleaned_MVimputed.LIVER_SOFA.round(decimals=4)

df_all251_withTemp_cleaned_MVimputed.COAG_SOFA = df_all251_withTemp_cleaned_MVimputed.COAG_SOFA.round(decimals=4)

df_all251_withTemp_cleaned_MVimputed.CARDIO_SOFA = df_all251_withTemp_cleaned_MVimputed.CARDIO_SOFA.round(decimals=4)

df_all251_withTemp_cleaned_MVimputed.CNS_SOFA = df_all251_withTemp_cleaned_MVimputed.CNS_SOFA.round(decimals=4)

df_all251_withTemp_cleaned_MVimputed.RESP_SOFA = df_all251_withTemp_cleaned_MVimputed.RESP_SOFA.round(decimals=4)



df_all251_withTemp_cleaned_MVimputed['TIME'] =  pd.to_datetime(df_all251_withTemp_cleaned_MVimputed['TIME'])

# Check if any null values exists in the final dataframe after cleaning and imputing missing values.
print(df_all251_withTemp_cleaned_MVimputed[df_all251_withTemp_cleaned_MVimputed.isnull().any(axis=1)])

"""
# **Plotting data for a single SHOCK *patient* to visualize the raw data**
"""

import plotly.graph_objects as go
fig = go.Figure()
df_single_subject = df_all251_withTemp_cleaned_MVimputed[df_all251_withTemp_cleaned_MVimputed['SUBJECT_ID']==69272] # 98253
fig.add_trace(go.Scatter(x=df_single_subject.TIME, y=df_single_subject.iloc[:,4], name = df_single_subject.iloc[:,4].name, line = dict(color = '#17BECF'), opacity = 0.8))
fig.add_trace(go.Scatter(x=df_single_subject.TIME, y=df_single_subject.iloc[:,5], name = df_single_subject.iloc[:,5].name, line = dict(color = '#CF1717'), opacity = 0.8))
fig.add_trace(go.Scatter(x=df_single_subject.TIME, y=df_single_subject.iloc[:,6], name = df_single_subject.iloc[:,6].name, line = dict(color = '#AACF17'), opacity = 0.8))
fig.add_trace(go.Scatter(x=df_single_subject.TIME, y=df_single_subject.iloc[:,7], name = df_single_subject.iloc[:,7].name, line = dict(color = '#17CF29'), opacity = 0.8))
fig.add_trace(go.Scatter(x=df_single_subject.TIME, y=df_single_subject.iloc[:,8], name = df_single_subject.iloc[:,8].name, line = dict(color = '#1742CF'), opacity = 0.8))
fig.add_trace(go.Scatter(x=df_single_subject.TIME, y=df_single_subject.iloc[:,9], name = df_single_subject.iloc[:,9].name, line = dict(color = '#B017CF'), opacity = 0.8))
fig.add_trace(go.Scatter(x=df_single_subject.TIME, y=df_single_subject.iloc[:,10], name = df_single_subject.iloc[:,10].name, line = dict(color = '#CFA417'), opacity = 0.8))
fig.add_trace(go.Scatter(x=df_single_subject.TIME, y=df_single_subject.iloc[:,11], name = df_single_subject.iloc[:,11].name, line = dict(color = '#CF5E17'), opacity = 0.8))


fig.update_layout(title_text=df_single_subject.iloc[:,4].name+', '+ df_single_subject.iloc[:,5].name+', '+df_single_subject.iloc[:,6].name+', '+df_single_subject.iloc[:,7].name+', '+df_single_subject.iloc[:,8].name+', '+
                 df_single_subject.iloc[:,9].name+', '+df_single_subject.iloc[:,10].name +', '+df_single_subject.iloc[:,11].name)

fig.show()

"""# **Heat Map on all 251 patients data to visualize correlation between the raw VITAL SIGNS**

"""

import seaborn as sns
data_corr = df_all251_withTemp_cleaned_MVimputed[['HR', 'SPO2', 'ABPSYS', 'ABPDIAS', 'ABPMEAN', 'RESP', 'TEMP','SOFA_SCORE']]
print(data_corr)
corr = data_corr.corr()# calculating the correlation between the above vital signs
sns.heatmap(corr, square=True) # plotting the correlation

subject_ids = df_all251_withTemp_cleaned_MVimputed.SUBJECT_ID.unique()
print((subject_ids))

from google.colab import files
uploaded = files.upload()

df_icutime = pd.read_csv(io.BytesIO(uploaded['2_Only_AllSepsisPatients_with_%MissingData_sepsisOnset+31_fluid+26.csv']))
print (df_icutime.columns)
#df_icutime = df_icutime[['subject_id','icustay_id','intime','outtime','sepsis_onsettime']]
#print (df_icutime.columns)
"""
df_icutime['intime'] =  pd.to_datetime(df_icutime['intime'])
df_icutime['outtime'] =  pd.to_datetime(df_icutime['outtime'])
"""

subject_ids=[69272]

"""#**FEATURE EXTRACTION FOR REGRESSION**

"""

temp_feature_cols= ['TIME',
               'HR',
               'RESP',
               'ABPSYS',
               'ABPDIAS',
               'ABPMEAN',
               'SPO2',
               'TEMP',
               'SOFA_SCORE',
               'RESP_SOFA', 
               'LIVER_SOFA', 
               'RENAL_SOFA', 
               'CARDIO_SOFA', 
               'CNS_SOFA', 
               'COAG_SOFA'
               ] 

feature_cols = [
               'HR',
               'RESP',
               'ABPSYS',
               'ABPDIAS',
               'ABPMEAN',
               'SPO2',
               'TEMP',
               'SOFA_SCORE',
               'RESP_SOFA', 
               'LIVER_SOFA', 
               'RENAL_SOFA', 
               'CARDIO_SOFA', 
               'CNS_SOFA', 
               'COAG_SOFA',
               'HAS_SHOCK',
               'ICUSTAY_ID',
                'SUBJECT_ID' ,
                'SEPSIS_ONSETTIME',
                'SEPSIS_SHOCK_ONSETTIME']

df_features.drop(df_features.index, inplace=True)

df_features =pd.DataFrame(columns=feature_cols);
for subject_id in subject_ids:
  #curr_idx = df_features.shape[0]

  icu_intime = df_icutime.loc[df_icutime.subject_id==subject_id , 'intime'].values[0]
  sepsis_onsettime = df_icutime.loc[df_icutime.subject_id==subject_id , 'sepsis_onsettime'].values[0]
  shock_onsetttime = df_icutime.loc[df_icutime.subject_id==subject_id , 'sepstic_shock_onsettime'].values[0]
  icustay_id = df_icutime.loc[df_icutime.subject_id==subject_id , 'icustay_id'].values[0]

  df_tsdata_subjectid_entire_31h = df_all251_withTemp_cleaned_MVimputed[(df_all251_withTemp_cleaned_MVimputed['SUBJECT_ID'] == subject_id) & ( ( df_all251_withTemp_cleaned_MVimputed['TIME'] >= datetime.datetime.strptime(sepsis_onsettime,'%Y-%m-%d %H:%M:%S')    ) & ( df_all251_withTemp_cleaned_MVimputed['TIME'] <= (datetime.datetime.strptime(sepsis_onsettime,'%Y-%m-%d %H:%M:%S') + datetime.timedelta(hours=31)) )  )]
  
  first_row = df_tsdata_subjectid_entire_31h.iloc[0,:]
  
  base_min = int(first_row['TIME'].strftime('%M') )

  
  #df_tsdata_subjectid_entire_31h = df_tsdata_subjectid_entire_31h.set_index("TIME")
  df_tsdata_subjectid_entire_31h= df_tsdata_subjectid_entire_31h[temp_feature_cols]
  
  #print(df_tsdata_subjectid_entire_31h)
  

  df_features_temp = df_tsdata_subjectid_entire_31h.resample('60min',base=base_min,  on='TIME').mean()
  df_features_temp['ICUSTAY_ID'] = icustay_id
  df_features_temp['SUBJECT_ID'] = subject_id
  df_features_temp['SEPSIS_ONSETTIME'] = sepsis_onsettime
  df_features_temp['SEPSIS_SHOCK_ONSETTIME'] = shock_onsetttime
  if str(shock_onsetttime)!='nan':
    df_features_temp['HAS_SHOCK'] = 1
  else:
    df_features_temp['HAS_SHOCK'] = 0
  #print(df_features_temp)

  #df_features = df_features.append(df_features_temp, ignore_index=True);
  df_features = df_features.append(df_features_temp);
  #print(df_features)

  icustay_id='';
  sepsis_onsettime='';
  shock_onsetttime = '';
  base_min = '';
  df_tsdata_subjectid_entire_31h.drop(df_tsdata_subjectid_entire_31h.index, inplace=True)  
  df_features_temp.drop(df_features_temp.index, inplace=True)  



  

  """
  df_features.loc[curr_idx,'SUBJECT_ID'] = subject_id
  df_features.loc[curr_idx,'SEPSIS_ONSETTIME'] = sepsis_onsettime
  df_features.loc[curr_idx,'SEPSIS_SHOCK_ONSETTIME'] = shock_onsetttime
  """
  """
  if str(shock_onsetttime) != 'nan':
    df_features.loc[curr_idx,'HAS_SHOCK'] = 1
  else:
    df_features.loc[curr_idx,'HAS_SHOCK'] = 0
  """

  
  # CALCULATING MEANS for ENTIRE 31 hours of data i.e. from sepsis onset time till sepsis onset time + 31 h
  """
  df_features.loc[curr_idx,'HR_MEAN_31'] =  df_tsdata_subjectid_entire_31h['HR'].rolling(window=60,min_periods =1).mean()
  df_features.loc[curr_idx,'RESP_MEAN_31'] = df_tsdata_subjectid_entire_31h['RESP'].rolling(window=60,min_periods =1).mean()
  df_features.loc[curr_idx,'ABPSYS_MEAN_31'] = df_tsdata_subjectid_entire_31h['ABPSYS'].rolling(window=60,min_periods =1).mean()
  df_features.loc[curr_idx,'ABPDIAS_MEAN_31'] = df_tsdata_subjectid_entire_31h['ABPDIAS'].rolling(window=60,min_periods =1).mean()
  df_features.loc[curr_idx,'ABPMEAN_MEAN_31'] = df_tsdata_subjectid_entire_31h['ABPMEAN'].rolling(window=60,min_periods =1).mean()
  df_features.loc[curr_idx,'SPO2_MEAN_31'] = df_tsdata_subjectid_entire_31h['SPO2'].rolling(window=60,min_periods =1).mean()
  df_features.loc[curr_idx,'TEMP_MEAN_31'] = df_tsdata_subjectid_entire_31h['TEMP'].rolling(window=60,min_periods =1).mean()


  
  

  icu_intime='';
  sepsis_onsettime='';
  shock_onsetttime = '';
  df_tsdata_subjectid_first_10h.drop(df_tsdata_subjectid_first_10h.index, inplace=True)
  df_tsdata_subjectid_first_20h.drop(df_tsdata_subjectid_first_20h.index, inplace=True) 
  df_tsdata_subjectid_entire_31h.drop(df_tsdata_subjectid_entire_31h.index, inplace=True)  
  #print(df_features)
  """

pd.set_option('display.max_rows', 50000)
pd.set_option('display.max_columns', 50)
pd.set_option('display.width', 1000)
pd.set_option('max_colwidth', 800)
print(df_features)

"""# **APPLYING REGRESSION ON VITALS TO PREDICT SOFA SCORE**

---


"""

import statsmodels.api as sm
import statsmodels.formula.api as smf

x= df_features[['HR','RESP','ABPSYS','ABPDIAS', 'ABPMEAN', 'SPO2', 'TEMP','SOFA_SCORE']]
#x = x.apply(pd.to_numeric).to_numpy()


#d = pd.DataFrame({'x_1': [1, 2, 3, 4], 'x_2': [2, 2, 2, 3], 'y': [2, 4, 6, 12]})
glm = smf.glm(formula ='SOFA_SCORE ~ HR + RESP + ABPSYS + ABPDIAS + ABPMEAN + SPO2 +  TEMP', data=x, family = sm.families.Poisson()).fit()

#print(glm.summary())
print(glm.params)

print("Dependent variables")
print(glm.model.endog_names)
predictions = glm.predict()
df_features['PRED_SOFA_SCORE'] = predictions
print(predictions) 
print(df_features.columns)

import plotly.graph_objects as go
fig = go.Figure()

fig.add_trace(go.Scatter(x=df_features.index, y=df_features.iloc[:,7], name = df_features.iloc[:,7].name, line = dict(color = '#17BECF'), opacity = 0.8))
fig.add_trace(go.Scatter(x=df_features.index, y=df_features.iloc[:,19], name = df_features.iloc[:,19].name, line = dict(color = '#CF1717'), opacity = 0.8))
"""
fig.add_trace(go.Scatter(x=df_single_subject.TIME, y=df_single_subject.iloc[:,6], name = df_single_subject.iloc[:,6].name, line = dict(color = '#AACF17'), opacity = 0.8))
fig.add_trace(go.Scatter(x=df_single_subject.TIME, y=df_single_subject.iloc[:,7], name = df_single_subject.iloc[:,7].name, line = dict(color = '#17CF29'), opacity = 0.8))
fig.add_trace(go.Scatter(x=df_single_subject.TIME, y=df_single_subject.iloc[:,8], name = df_single_subject.iloc[:,8].name, line = dict(color = '#1742CF'), opacity = 0.8))
fig.add_trace(go.Scatter(x=df_single_subject.TIME, y=df_single_subject.iloc[:,9], name = df_single_subject.iloc[:,9].name, line = dict(color = '#B017CF'), opacity = 0.8))
fig.add_trace(go.Scatter(x=df_single_subject.TIME, y=df_single_subject.iloc[:,10], name = df_single_subject.iloc[:,10].name, line = dict(color = '#CFA417'), opacity = 0.8))
fig.add_trace(go.Scatter(x=df_single_subject.TIME, y=df_single_subject.iloc[:,11], name = df_single_subject.iloc[:,11].name, line = dict(color = '#CF5E17'), opacity = 0.8))

"""
fig.update_layout(title_text=df_features.iloc[:,7].name+', '+ df_features.iloc[:,19].name)

fig.show()

"""# **APPLYING REGRESSION ON VITALS TO PREDICT PC1 OF SOFA SCORE**


> Indented block


---


"""

#TO eXTRACT PC1 OF SOFA SCORE
from sklearn.preprocessing import StandardScaler, MinMaxScaler

from sklearn.decomposition import PCA
print(df_features.columns)

"""
cols_of_interest = ['HR_MEAN_10','HR_MEAN_20','HR_MEAN_31',
               'RESP_MEAN_10','RESP_MEAN_20','RESP_MEAN_31',
               'ABPSYS_MEAN_10' ,'ABPSYS_MEAN_20','ABPSYS_MEAN_31',
               'ABPDIAS_MEAN_10','ABPDIAS_MEAN_20','ABPDIAS_MEAN_31',
               'ABPMEAN_MEAN_10','ABPMEAN_MEAN_20','ABPMEAN_MEAN_31',
               'SPO2_MEAN_10','SPO2_MEAN_20','SPO2_MEAN_31',
               'TEMP_MEAN_10','TEMP_MEAN_20','TEMP_MEAN_31' ];

data = df_features[cols_of_interest]
scaled_data = MinMaxScaler().fit_transform(data)
print('scaled data dataframe')
print(scaled_data)
"""
sofa_sore = df_features[['SOFA_SCORE','RESP_SOFA', 'LIVER_SOFA', 'RENAL_SOFA', 'CARDIO_SOFA', 'CNS_SOFA', 'COAG_SOFA']]



#plotting PCA components
pca = PCA(n_components=7)
principalComponents = pca.fit_transform(sofa_sore)

# Plot the explained variances
features = range(pca.n_components_)
plt.bar(features, pca.explained_variance_ratio_, color='black')
plt.xlabel('PCA features')
plt.ylabel('variance %')
plt.xticks(features)

# Save components to a DataFrame
PCA_components = pd.DataFrame(principalComponents)

print(PCA_components[0])

df_features['SOFA_PCA_1'] = PCA_components[0].to_numpy()
print(df_features)
df_features.SOFA_PCA_1 = df_features.SOFA_PCA_1.round(decimals=4)
print(df_features)

import statsmodels.api as sm
import statsmodels.formula.api as smf

x_pca = df_features[['HR','RESP','ABPSYS','ABPDIAS', 'ABPMEAN', 'SPO2', 'TEMP','SOFA_SCORE','SOFA_PCA_1']]
#x = x.apply(pd.to_numeric).to_numpy()
print(x_pca)

#d = pd.DataFrame({'x_1': [1, 2, 3, 4], 'x_2': [2, 2, 2, 3], 'y': [2, 4, 6, 12]})
glm_pca = smf.glm(formula='SOFA_PCA_1 ~ HR + RESP + ABPSYS + ABPDIAS + ABPMEAN + SPO2 + TEMP', data=x_pca, family = sm.families.Poisson()).fit(method="lbfgs")

#print(glm.summary())
print(glm_pca.params)

print("Dependent variables")
print(glm_pca.model.endog_names)
predictions_pca = glm_pca.predict()
df_features['PRED_SOFA_SCORE_PCA'] = predictions_pca

#df_features.PRED_SOFA_SCORE_PCA = df_features.PRED_SOFA_SCORE_PCA.round(decimals=10)

print(df_features)
print(predictions_pca )
print(df_features.columns)

"""
'HR', 0
 'RESP', 1
 'ABPSYS', 2
 'ABPDIAS', 3
 'ABPMEAN', 4
 'SPO2', 5
 'TEMP', 6
 'SOFA_SCORE', 7
 'RESP_SOFA', 8
 'LIVER_SOFA', 9
 'RENAL_SOFA', 10
 'CARDIO_SOFA', 11
 'CNS_SOFA', 12
 'COAG_SOFA', 13
 'HAS_SHOCK' , 14

 'ICUSTAY_ID', 15
 'SUBJECT_ID', 16
 'SEPSIS_ONSETTIME', 17
 ''SEPSIS_SHOCK_ONSETTIME', 18
  'PRED_SOFA_SCORE', 19
  'SOFA_PCA_1', 20
  'PRED_SOFA_SCORE_PCA' 21
"""
import plotly.graph_objects as go
fig = go.Figure()

print(df_features.iloc[:,21])
fig.add_trace(go.Scatter(x=df_features.index, y=df_features.iloc[:,20], name = df_features.iloc[:,20].name, line = dict(color = '#17BECF'), opacity = 0.8))
fig.add_trace(go.Scatter(x=df_features.index, y=df_features.iloc[:,21], name = df_features.iloc[:,21].name, line = dict(color = '#CF1717'), opacity = 0.8))
"""
fig.add_trace(go.Scatter(x=df_single_subject.TIME, y=df_single_subject.iloc[:,6], name = df_single_subject.iloc[:,6].name, line = dict(color = '#AACF17'), opacity = 0.8))
fig.add_trace(go.Scatter(x=df_single_subject.TIME, y=df_single_subject.iloc[:,7], name = df_single_subject.iloc[:,7].name, line = dict(color = '#17CF29'), opacity = 0.8))
fig.add_trace(go.Scatter(x=df_single_subject.TIME, y=df_single_subject.iloc[:,8], name = df_single_subject.iloc[:,8].name, line = dict(color = '#1742CF'), opacity = 0.8))
fig.add_trace(go.Scatter(x=df_single_subject.TIME, y=df_single_subject.iloc[:,9], name = df_single_subject.iloc[:,9].name, line = dict(color = '#B017CF'), opacity = 0.8))
fig.add_trace(go.Scatter(x=df_single_subject.TIME, y=df_single_subject.iloc[:,10], name = df_single_subject.iloc[:,10].name, line = dict(color = '#CFA417'), opacity = 0.8))
fig.add_trace(go.Scatter(x=df_single_subject.TIME, y=df_single_subject.iloc[:,11], name = df_single_subject.iloc[:,11].name, line = dict(color = '#CF5E17'), opacity = 0.8))

"""
fig.update_layout(title_text=df_features.iloc[:,20].name+', '+ df_features.iloc[:,21].name)

fig.show()

"""# **Checking the correlation between PC1 of VITALS and the SOFA SCORE**




---


"""

# FOR shock patients

#TO eXTRACT PC1 OF SOFA SCORE
from sklearn.preprocessing import StandardScaler, MinMaxScaler
import seaborn as sns

from sklearn.decomposition import PCA

"""
cols_of_interest = ['HR_MEAN_10','HR_MEAN_20','HR_MEAN_31',
               'RESP_MEAN_10','RESP_MEAN_20','RESP_MEAN_31',
               'ABPSYS_MEAN_10' ,'ABPSYS_MEAN_20','ABPSYS_MEAN_31',
               'ABPDIAS_MEAN_10','ABPDIAS_MEAN_20','ABPDIAS_MEAN_31',
               'ABPMEAN_MEAN_10','ABPMEAN_MEAN_20','ABPMEAN_MEAN_31',
               'SPO2_MEAN_10','SPO2_MEAN_20','SPO2_MEAN_31',
               'TEMP_MEAN_10','TEMP_MEAN_20','TEMP_MEAN_31' ];

data = df_features[cols_of_interest]
scaled_data = MinMaxScaler().fit_transform(data)
print('scaled data dataframe')
print(scaled_data)
"""
df_features_shock = df_features[df_features['HAS_SHOCK']==1]
vitals_shock = df_features_shock[['HR', 'RESP', 'ABPSYS', 'ABPDIAS', 'ABPMEAN', 'SPO2', 'TEMP']]



#plotting PCA components
pca_vitals = PCA(n_components=7)
principalComponents_vitals = pca_vitals.fit_transform(vitals_shock)

# Plot the explained variances
features = range(pca_vitals.n_components_)
plt.bar(features, pca_vitals.explained_variance_ratio_, color='black')
plt.xlabel('PCA features')
plt.ylabel('variance %')
plt.xticks(features)

# Save components to a DataFrame
PCA_components_vitals = pd.DataFrame(principalComponents_vitals)


df_features_shock['VITALS_PCA_1'] = PCA_components_vitals[0].to_numpy()

data_corr_shock = df_features_shock[['VITALS_PCA_1','SOFA_SCORE']]
corr_shock = data_corr_shock.corr()# calculating the correlation between the above vital signs
print('Correlation: ', corr_shock)
sns.heatmap(corr_shock, square=True) # plotting the correlation

# FOR NON shock patients

#TO eXTRACT PC1 OF SOFA SCORE
from sklearn.preprocessing import StandardScaler, MinMaxScaler
import seaborn as sns

from sklearn.decomposition import PCA
print(df_features.columns)

"""
cols_of_interest = ['HR_MEAN_10','HR_MEAN_20','HR_MEAN_31',
               'RESP_MEAN_10','RESP_MEAN_20','RESP_MEAN_31',
               'ABPSYS_MEAN_10' ,'ABPSYS_MEAN_20','ABPSYS_MEAN_31',
               'ABPDIAS_MEAN_10','ABPDIAS_MEAN_20','ABPDIAS_MEAN_31',
               'ABPMEAN_MEAN_10','ABPMEAN_MEAN_20','ABPMEAN_MEAN_31',
               'SPO2_MEAN_10','SPO2_MEAN_20','SPO2_MEAN_31',
               'TEMP_MEAN_10','TEMP_MEAN_20','TEMP_MEAN_31' ];

data = df_features[cols_of_interest]
scaled_data = MinMaxScaler().fit_transform(data)
print('scaled data dataframe')
print(scaled_data)
"""
df_features_nonshock = df_features[df_features['HAS_SHOCK']==0]
vitals_shock = df_features_nonshock[['HR', 'RESP', 'ABPSYS', 'ABPDIAS', 'ABPMEAN', 'SPO2', 'TEMP']]



#plotting PCA components
pca_vitals = PCA(n_components=7)
principalComponents_vitals = pca_vitals.fit_transform(vitals_shock)

# Plot the explained variances
features = range(pca_vitals.n_components_)
plt.bar(features, pca_vitals.explained_variance_ratio_, color='black')
plt.xlabel('PCA features')
plt.ylabel('variance %')
plt.xticks(features)

# Save components to a DataFrame
PCA_components_vitals = pd.DataFrame(principalComponents_vitals)

#print(PCA_components_vitals[0])

df_features_nonshock['VITALS_PCA_1'] = PCA_components_vitals[0].to_numpy()
#print(df_features_nonshock)

data_corr_shock = df_features_nonshock[['VITALS_PCA_1','SOFA_SCORE']]
corr_shock = data_corr_shock.corr()# calculating the correlation between the above vital signs
print('Correlation: ', corr_shock)
sns.heatmap(corr_shock, square=True) # plotting the correlation