# -*- coding: utf-8 -*-
"""10_AddingSOFADataToSignalData.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e_ZzPiv5ScaASusFX9KAmXUBwWJ0vGvf
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
import pandas as pd
import io
import pandas as pd
from IPython.display import display
import matplotlib.pyplot as plt
# %matplotlib inline
import numpy as np
import os
import shutil
import posixpath
import urllib.request
import datetime
from collections import namedtuple

drive.mount('/content/gdrive')

df_all404_csvdata_with_temp = pd.read_csv('/content/gdrive/My Drive/Master thesis/df_ts_records_all404_patients_withTEMP.csv')
df_all404_csvdata_with_temp['TIME'] =  pd.to_datetime(df_all404_csvdata_with_temp['TIME'])
print(df_all404_csvdata_with_temp.shape)

from google.colab import files
uploaded = files.upload()

df_ALL1655_sofadata = pd.read_csv(io.BytesIO(uploaded['df_ALL1655_sofadata.csv']))

df_ALL1655_sofadata['CALCULATION_TIME'] =  pd.to_datetime(df_ALL1655_sofadata['CALCULATION_TIME'])
print(df_ALL1655_sofadata)
print(df_ALL1655_sofadata.columns)

subject_ids_404 = df_all404_csvdata_with_temp.SUBJECT_ID.unique()
print(subject_ids_404)
print(len(subject_ids_404))

df_all404_csvdata_with_temp['SOFA_SCORE'] = np.nan;
df_all404_csvdata_with_temp['RESP_SOFA']= np.nan;
df_all404_csvdata_with_temp['LIVER_SOFA']= np.nan;
df_all404_csvdata_with_temp['RENAL_SOFA']= np.nan;
df_all404_csvdata_with_temp['CARDIO_SOFA']= np.nan;
df_all404_csvdata_with_temp['CNS_SOFA']= np.nan;
df_all404_csvdata_with_temp['COAG_SOFA']= np.nan;

#subject_ids_404 = [40227,62824] ## 2133-06-13 04:11:02
#df_saf = df_all404_csvdata[df_all404_csvdata['SUBJECT_ID'] == 40227] #
#print(df_saf[['TIME','TEMP','HR']])#

for subject_id in subject_ids_404:
  df_all404_csvdata_subjectid = df_all404_csvdata_with_temp[df_all404_csvdata_with_temp['SUBJECT_ID'] == subject_id]

  count_sofa_per_sub = 0 ;

  for index, row in (df_ALL1655_sofadata[df_ALL1655_sofadata['SUBJECT_ID'] == subject_id]).iterrows():

    #print('sofascore', row['SOFA_SCORE']) 
    count_sofa_per_sub = count_sofa_per_sub +1 

    #print('count for current subject id', count_sofa_per_sub)
    try:

      df_all404_csvdata_index = df_all404_csvdata_subjectid.index[(df_all404_csvdata_subjectid['TIME'].dt.strftime('%Y-%m-%d %H:%M') == (row['CALCULATION_TIME'].strftime('%Y-%m-%d %H:%M' ))) ]

      #print('length of index',len(df_all404_csvdata_index))

      if (len(df_all404_csvdata_index) == 0 ) & (count_sofa_per_sub == 1 ):
        #print('index not found')
        first_TS_time = row['CALCULATION_TIME'] + datetime.timedelta(minutes=1)
        #print(first_TS_time)
        df_all404_csvdata_index = df_all404_csvdata_subjectid.index[(df_all404_csvdata_subjectid['TIME'].dt.strftime('%Y-%m-%d %H:%M') == (first_TS_time.strftime('%Y-%m-%d %H:%M' ))   ) ]
        #print(df_all404_csvdata_index)
        first_TS_time='';
        
      df_all404_csvdata_with_temp.loc[df_all404_csvdata_index,'SOFA_SCORE'] = row['SOFA_SCORE']
      df_all404_csvdata_with_temp.loc[df_all404_csvdata_index,'RESP_SOFA'] = row['RESP_SOFA']
      df_all404_csvdata_with_temp.loc[df_all404_csvdata_index,'LIVER_SOFA'] = row['LIVER_SOFA']
      df_all404_csvdata_with_temp.loc[df_all404_csvdata_index,'RENAL_SOFA'] = row['RENAL_SOFA']
      df_all404_csvdata_with_temp.loc[df_all404_csvdata_index,'CARDIO_SOFA'] = row['CARDIO_SOFA']
      df_all404_csvdata_with_temp.loc[df_all404_csvdata_index,'CNS_SOFA'] = row['CNS_SOFA']
      df_all404_csvdata_with_temp.loc[df_all404_csvdata_index,'COAG_SOFA'] = row['COAG_SOFA']
      
    except:
      print('Error occured when inserting temp data for SUBJEC_ID : '+ subject_id + 'for TIME : ' + row['CALCULATION_TIME']);
    
    df_all404_csvdata_index = '';
    
  df_all404_csvdata_subjectid.drop(df_all404_csvdata_subjectid.index, inplace = True)
  print('TEMP data inserted successfuly for subject id : '+ str(subject_id)); 




"""

df_test.drop(df_test.index, inplace=True)

print('last time',charttime )
print('only last time minute', (datetime.datetime.strptime((charttime.strftime('%Y-%m-%d %H:%M' )), '%Y-%m-%d %H:%M')) )
df_test = df_all404_csvdata[df_all404_csvdata['SUBJECT_ID'] == 98930]
df_test = df_test.loc[3975:4000, :]
print('slice of dataframe to test')
print(df_test[['TIME','HR','RESP']])
print('applying date filter')
df_test = df_test[df_test['TIME'].dt.strftime('%Y-%m-%d %H:%M') == (charttime.strftime('%Y-%m-%d %H:%M' ))]
df_test_index = df_test.index[df_test['TIME'].dt.strftime('%Y-%m-%d %H:%M') == (charttime.strftime('%Y-%m-%d %H:%M' ))]

print('INDEX', df_test_index)
print(df_test[['TIME','HR','RESP','TEMP']])
print('ROW AFTER INDEX')
print(df_all404_csvdata.loc[df_test_index])

"""

"""
print(df_test['TIME'])
df_test = df_test['TIME'].dt.strftime('%Y-%m-%d %H:%M')
print('only minute dataframe data')
print(df_test)
"""
#df_test = pd.to_datetime(df_test['TIME'])
#print(df_test.loc[3975:4000, 'TIME'])

#print('filtering date')
#print(df_test[df_test['TIME'] == charttime])

pd.set_option('display.max_rows', 20000)
pd.set_option('display.max_columns', 50)
pd.set_option('display.width', 1000)
pd.set_option('max_colwidth', 800)

df_test_52264 = df_all404_csvdata_with_temp[df_all404_csvdata_with_temp['SUBJECT_ID']==62824]
print(df_test_52264[['TIME','SOFA_SCORE']])

print(df_ALL1655_sofadata[df_ALL1655_sofadata['SUBJECT_ID'] == 62824])

df_all404_csvdata_with_temp.to_csv('df_ts_records_all404_patients_with_TEMP_SOFA.csv', sep=',', index = False, header=True);

!cp "/content/df_ts_records_all404_patients_with_TEMP_SOFA.csv" "/content/gdrive/My Drive/Master thesis"