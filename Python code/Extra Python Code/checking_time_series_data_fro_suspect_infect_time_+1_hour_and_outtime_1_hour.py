# -*- coding: utf-8 -*-
"""Checking time series data fro suspect_infect_time +1 hour and outtime - 1 hour.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P5QAV8iLYCK6UA42OR4whtc2mzhKI-x4
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install wfdb
import io
import pandas as pd
from IPython.display import display
import matplotlib.pyplot as plt
# %matplotlib inline
import numpy as np
import os
import shutil
import posixpath
import wfdb
import urllib.request
import datetime
from collections import namedtuple

from google.colab import files
uploaded = files.upload()

df_waveform_exists = pd.read_csv(io.BytesIO(uploaded['new_df_waveform_exists.csv']))
#df_housrly_csvdata = pd.read_excel('df_TS_exists_withoutTEMP_hourlycounts.xls',)
# Dataset is now stored in a Pandas Dataframe
print ('shape of the new df_Waveform_exists : ')
print(df_waveform_exists)

df_waveform_exists['6_sig_exists']='';

df_waveform_exists['SI+1_timeoverlap_exists']='';
df_waveform_exists['SI+1_overlap_duration']=''
df_waveform_exists['SI+1_Number_of_overlaping_records'] =''


df_waveform_exists['SI+2_timeoverlap_exists']='';
df_waveform_exists['SI+2_overlap_duration']=''
df_waveform_exists['SI+2_Number_of_overlaping_records'] =''


df_waveform_exists['SI+3_timeoverlap_exists']='';
df_waveform_exists['SI+3_overlap_duration']=''
df_waveform_exists['SI+3_Number_of_overlaping_records'] =''



df_waveform_exists['SI+4_timeoverlap_exists']='';
df_waveform_exists['SI+4_overlap_duration']=''
df_waveform_exists['SI+4_Number_of_overlaping_records'] =''
#############################################################


df_waveform_exists['OUT-1_timeoverlap_exists']='';
df_waveform_exists['OUT-1_overlap_duration']=''
df_waveform_exists['OUT-1_Number_of_overlaping_records'] =''


df_waveform_exists['OUT-2_timeoverlap_exists']='';
df_waveform_exists['OUT-2_overlap_duration']=''
df_waveform_exists['OUT-2_Number_of_overlaping_records'] =''


df_waveform_exists['OUT-3_timeoverlap_exists']='';
df_waveform_exists['OUT-3_overlap_duration']=''
df_waveform_exists['OUT-3_Number_of_overlaping_records'] =''



df_waveform_exists['OUT-4_timeoverlap_exists']='';
df_waveform_exists['OUT-4_overlap_duration']=''
df_waveform_exists['OUT-4_Number_of_overlaping_records'] =''

#######################################################

df_waveform_exists['SEPSIS+1_timeoverlap_exists']='';
df_waveform_exists['SEPSIS+1_overlap_duration']=''
df_waveform_exists['SEPSIS+1_Number_of_overlaping_records'] =''


df_waveform_exists['SEPSIS+2_timeoverlap_exists']='';
df_waveform_exists['SEPSIS+2_overlap_duration']=''
df_waveform_exists['SEPSIS+2_Number_of_overlaping_records'] =''


df_waveform_exists['SEPSIS+3_timeoverlap_exists']='';
df_waveform_exists['SEPSIS+3_overlap_duration']=''
df_waveform_exists['SEPSIS+3_Number_of_overlaping_records'] =''


df_waveform_exists['SEPSIS+4_timeoverlap_exists']='';
df_waveform_exists['SEPSIS+4_overlap_duration']=''
df_waveform_exists['SEPSIS+4_Number_of_overlaping_records'] =''

################################################################


df_waveform_exists['SEPSIS-1_timeoverlap_exists']='';
df_waveform_exists['SEPSIS-1_overlap_duration']=''
df_waveform_exists['SEPSIS-1_Number_of_overlaping_records'] =''


df_waveform_exists['SEPSIS-2_timeoverlap_exists']='';
df_waveform_exists['SEPSIS-2_overlap_duration']=''
df_waveform_exists['SEPSIS-2_Number_of_overlaping_records'] =''


df_waveform_exists['SEPSIS-3_timeoverlap_exists']='';
df_waveform_exists['SEPSIS-3_overlap_duration']=''
df_waveform_exists['SEPSIS-3_Number_of_overlaping_records'] =''


df_waveform_exists['SEPSIS-4_timeoverlap_exists']='';
df_waveform_exists['SEPSIS-4_overlap_duration']=''
df_waveform_exists['SEPSIS-4_Number_of_overlaping_records'] =''
####################################################################

df_waveform_exists['SHOCK-1_timeoverlap_exists']='';
df_waveform_exists['SHOCK-1_overlap_duration']=''
df_waveform_exists['SHOCK-1_Number_of_overlaping_records'] =''


df_waveform_exists['SHOCK-2_timeoverlap_exists']='';
df_waveform_exists['SHOCK-2_overlap_duration']=''
df_waveform_exists['SHOCK-2_Number_of_overlaping_records'] =''


df_waveform_exists['SHOCK-3_timeoverlap_exists']='';
df_waveform_exists['SHOCK-3_overlap_duration']=''
df_waveform_exists['SHOCK-3_Number_of_overlaping_records'] =''


df_waveform_exists['SHOCK-4_timeoverlap_exists']='';
df_waveform_exists['SHOCK-4_overlap_duration']=''
df_waveform_exists['SHOCK-4_Number_of_overlaping_records'] =''

###########################################################


df_waveform_exists['SHOCK+1_timeoverlap_exists']='';
df_waveform_exists['SHOCK+1_overlap_duration']=''
df_waveform_exists['SHOCK+1_Number_of_overlaping_records'] =''


df_waveform_exists['SHOCK+2_timeoverlap_exists']='';
df_waveform_exists['SHOCK+2_overlap_duration']=''
df_waveform_exists['SHOCK+2_Number_of_overlaping_records'] =''


df_waveform_exists['SHOCK+3_timeoverlap_exists']='';
df_waveform_exists['SHOCK+3_overlap_duration']=''
df_waveform_exists['SHOCK+3_Number_of_overlaping_records'] =''


df_waveform_exists['SHOCK+4_timeoverlap_exists']='';
df_waveform_exists['SHOCK+4_overlap_duration']=''
df_waveform_exists['SHOCK+4_Number_of_overlaping_records'] =''

print(df_waveform_exists.columns)

pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 1000)

print(df_waveform_exists)

import numpy
from collections import namedtuple
for index, row in df_waveform_exists.iterrows():
    print(row['subject_id'], row['icustay_id'], row['sepsis_onsettime'],row['intime'],row['outtime'])
    if str(row['sepsis_onsettime']) == 'nan':
      print('NULL SEPSIS ONNSET TIME')

#### to check SI TIME + 1, 2, 3, 4 HOURs

#### to check ICU outtime - 1, 2, 3, 4 HOURs


from collections import namedtuple
for index, row in df_waveform_exists.iterrows():
    #print(row['subject_id'], row['icustay_id'], row['sepsis_onsettime'],row['intime'],row['outtime'])
    records_toRead=[]
    wdb_dir_path = 'mimic3wdb/matched/p'+ str(row['subject_id']).zfill(6)[:2] + '/p' + str(row['subject_id']).zfill(6) + '/';
    wdb_path_toAllRecords = 'https://archive.physionet.org/physiobank/database/'+ wdb_dir_path + 'RECORDS';
    wdb_records =  urllib.request.urlopen(wdb_path_toAllRecords);   

    count_overlaping_records_1 = 0 
    overlap_duration_1 = '';

    count_overlaping_records_2 = 0 
    overlap_duration_2 = '';

    count_overlaping_records_3 = 0 
    overlap_duration_3 = '';

    count_overlaping_records_4 = 0 
    overlap_duration_4 = '';

    ###############################

    count_overlaping_records_outtime_1 = 0 
    overlap_duration_outtime_1 = '';

    count_overlaping_records_outtime_2 = 0 
    overlap_duration_outtime_2 = '';

    count_overlaping_records_outtime_3 = 0 
    overlap_duration_outtime_3 = '';

    count_overlaping_records_outtime_4 = 0 
    overlap_duration_outtime_4 = '' ;
    ########################################
    overlap_sepsis_plus_duration_1 = '';
    count_overlaping_records_sepsis_plus_1 = 0 

    overlap_sepsis_plus_duration_2 = '';
    count_overlaping_records_sepsis_plus_2 = 0 

    overlap_sepsis_plus_duration_3 = '';
    count_overlaping_records_sepsis_plus_3 = 0 

    overlap_sepsis_plus_duration_4 = '';
    count_overlaping_records_sepsis_plus_4 = 0 
    ##########################################

    overlap_sepsis_minus_duration_1 = '';
    count_overlaping_records_sepsis_minus_1 = 0 

    overlap_sepsis_minus_duration_2= '';
    count_overlaping_records_sepsis_minus_2 = 0 

    overlap_sepsis_minus_duration_3= '';
    count_overlaping_records_sepsis_minus_3 = 0 

    overlap_sepsis_minus_duration_4= '';
    count_overlaping_records_sepsis_minus_4 = 0 

    ###############################################

    overlap_shock_plus_duration_1 = '';
    count_overlaping_records_shock_plus_1 = 0 

    overlap_shock_plus_duration_2 = '';
    count_overlaping_records_shock_plus_2 = 0 

    overlap_shock_plus_duration_3 = '';
    count_overlaping_records_shock_plus_3 = 0 

    overlap_shock_plus_duration_4 = '';
    count_overlaping_records_shock_plus_4 = 0 
    ########################################

    overlap_shock_minus_duration_1 = '';
    count_overlaping_records_shock_minus_1 = 0 

    overlap_shock_minus_duration_2 = '';
    count_overlaping_records_shock_minus_2 = 0 

    overlap_shock_minus_duration_3 = '';
    count_overlaping_records_shock_minus_3 = 0 

    overlap_shock_minus_duration_4 = '';
    count_overlaping_records_shock_minus_4 = 0 


    for lines in wdb_records.readlines():
      record = lines.decode("utf-8"); 
      record = str(record).rstrip()
      #print (record[-1:])
      if record[-1:] == 'n':
        #print(record);
        #print (wdb_dir_path);
        record = str(record).rstrip()

        try:
          signals,fields = wfdb.rdsamp(record, pn_dir=wdb_dir_path) ; 
          #wfdb.plot_items(signal=signals, fs=fields['fs'])
          #display(signals)
          #display(fields)
          #print ('fs' , fields['fs']);
          #print ('signal length',fields['sig_len']);
          #print ('date' ,fields['base_date'] );        
          #print ('time' ,fields['base_time'] );
          #print ('%.3f'%(fields['fs']))
          
          list_sig_name = [item.upper().replace(' ','') for item in fields['sig_name']]

          sig_exist_1 = all(x in list_sig_name for x in ['HR', 'SPO2','ABPSYS','ABPDIAS','ABPMEAN','RESP']);  #%SpO2
          sig_exist_2 = all(x in list_sig_name for x in ['HR', '%SPO2','ABPSYS','ABPDIAS','ABPMEAN','RESP']); 

          if ((sig_exist_1 == True) or (sig_exist_2 == True)) :

            df_waveform_exists.loc[index,'6_sig_exists'] = 1;
            record_starttime = datetime.datetime.combine(fields['base_date'] ,fields['base_time'] ) ;
            
            if  '%.3f'%(fields['fs']) == '1.000' :
              record_endtime = record_starttime + datetime.timedelta(seconds= (fields['sig_len']-1)) ;
            elif '%.3f'%(fields['fs'])== '0.017' :
              record_endtime = record_starttime + datetime.timedelta(minutes = (fields['sig_len']-1)) ;
            else : 
              print('ERROR IN SAMPLING');
              print(record);
              print (wdb_dir_path);

            #Caculate if we have a recording for the time of icu stay
            print('record start time: ', record_starttime)
            print('record end time: ', record_endtime)
            print('suspected infection time: ' , row['suspected_infection_time_poe'])
            print('ICU outtime: ' , row['outtime'])

            if str(row['suspected_infection_time_poe']) != 'nan' : 
              #for suspected innfection time + 1 hour

              Range='';
              r1='';
              r2='';

              Range = namedtuple('Range', ['start', 'end'])
              r1 = Range(start= datetime.datetime.strptime(row['suspected_infection_time_poe'],'%Y-%m-%d %H:%M:%S'), end= (datetime.datetime.strptime(row['suspected_infection_time_poe'],'%Y-%m-%d %H:%M:%S') + datetime.timedelta(hours=1) ) )
              r2 = Range(start= record_starttime, end = record_endtime)
              latest_start = max(r1.start, r2.start)
              earliest_end = min(r1.end, r2.end)
              print('latest_start: ' ,latest_start )
              print('earliest_end: ' ,earliest_end )
              

              if (r1.start <= r2.end) and (r2.start <= r1.end) :
                print('SI PLUS 1 : RECORD EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                delta=0;
                delta = ((earliest_end - latest_start).seconds )/60 
                overlap_duration_1 = overlap_duration_1 + ',' + str(delta)
                df_waveform_exists.loc[index,'SI+1_timeoverlap_exists'] = 1;
                count_overlaping_records_1 = count_overlaping_records_1 +1 ;

                #todo : adding new dataframe, exatracting required signals, computing avergage for per sminute values in case of per second sampling frequency

              else:            
                print('SI PLUS 1 : RECORD DOES NOT EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                #df_csvdata.loc[index,'timeoverlap'] = 0;



              #for suspected innfection time + 2 hour
              Range='';
              r1='';
              r2='';

              Range = namedtuple('Range', ['start', 'end'])
              #datetime.timedelta(hours=24)

              r1 = Range(start= datetime.datetime.strptime(row['suspected_infection_time_poe'],'%Y-%m-%d %H:%M:%S'), end= (datetime.datetime.strptime(row['suspected_infection_time_poe'],'%Y-%m-%d %H:%M:%S') + datetime.timedelta(hours=2) ) )
              r2 = Range(start= record_starttime, end = record_endtime)
              latest_start = max(r1.start, r2.start)
              earliest_end = min(r1.end, r2.end)
              print('latest_start: ' ,latest_start )
              print('earliest_end: ' ,earliest_end )
              

              if (r1.start <= r2.end) and (r2.start <= r1.end) :
                print('SI PLUS 2 : RECORD EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                delta = 0;
                delta = ((earliest_end - latest_start).seconds )/60
                overlap_duration_2 = overlap_duration_2 + ',' + str(delta)
                df_waveform_exists.loc[index,'SI+2_timeoverlap_exists'] = 1;
                count_overlaping_records_2 = count_overlaping_records_2 +1 ;

                #todo : adding new dataframe, exatracting required signals, computing avergage for per sminute values in case of per second sampling frequency

              else:            
                print('SI PLUS 2 : RECORD DOES NOT EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                #df_csvdata.loc[index,'timeoverlap'] = 0;
              

              #for suspected innfection time + 3 hour
              Range='';
              r1='';
              r2='';
              Range = namedtuple('Range', ['start', 'end'])
              r1 = Range(start= datetime.datetime.strptime(row['suspected_infection_time_poe'],'%Y-%m-%d %H:%M:%S'), end= (datetime.datetime.strptime(row['suspected_infection_time_poe'],'%Y-%m-%d %H:%M:%S') + datetime.timedelta(hours=3) ) )
              r2 = Range(start= record_starttime, end = record_endtime)
              latest_start = max(r1.start, r2.start)
              earliest_end = min(r1.end, r2.end)
              print('latest_start: ' ,latest_start )
              print('earliest_end: ' ,earliest_end )
              
              if (r1.start <= r2.end) and (r2.start <= r1.end) :
                print('SI PLUS 3 : RECORD EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                delta = 0 ;
                delta = ((earliest_end - latest_start).seconds )/60
                overlap_duration_3 = overlap_duration_3 + ',' + str(delta)
                df_waveform_exists.loc[index,'SI+3_timeoverlap_exists'] = 1;
                count_overlaping_records_3 = count_overlaping_records_3 +1 ;

                #todo : adding new dataframe, exatracting required signals, computing avergage for per sminute values in case of per second sampling frequency

              else:            
                print('SI PLUS 3 : RECORD DOES NOT EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                #df_csvdata.loc[index,'timeoverlap'] = 0;
              

              #for suspected innfection time + 4 hour
              Range='';
              r1='';
              r2='';
              Range = namedtuple('Range', ['start', 'end'])

              r1 = Range(start= datetime.datetime.strptime(row['suspected_infection_time_poe'],'%Y-%m-%d %H:%M:%S'), end= (datetime.datetime.strptime(row['suspected_infection_time_poe'],'%Y-%m-%d %H:%M:%S') + datetime.timedelta(hours=4) ) )
              r2 = Range(start= record_starttime, end = record_endtime)
              latest_start = max(r1.start, r2.start)
              earliest_end = min(r1.end, r2.end)
              print('latest_start: ' ,latest_start )
              print('earliest_end: ' ,earliest_end )
              

              if (r1.start <= r2.end) and (r2.start <= r1.end) :
                print('SI PLUS 4 : RECORD EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                delta = 0;
                delta = ((earliest_end - latest_start).seconds )/60
                overlap_duration_4 = overlap_duration_4 + ',' + str(delta)
                df_waveform_exists.loc[index,'SI+4_timeoverlap_exists'] = 1;
                count_overlaping_records_4 = count_overlaping_records_4 +1 ;

                #todo : adding new dataframe, exatracting required signals, computing avergage for per sminute values in case of per second sampling frequency

              else:            
                print('SI PLUS 4 : RECORD DOES NOT EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                #df_csvdata.loc[index,'timeoverlap'] = 0;

            #########################################################################################################################

            if str(row['sepsis_onsettime'] ) != 'nan' : 
              #for sepsis onset time + 1 hour

              Range='';
              r1='';
              r2='';

              Range = namedtuple('Range', ['start', 'end'])
              r1 = Range(start= datetime.datetime.strptime(row['sepsis_onsettime'],'%Y-%m-%d %H:%M:%S'), end= (datetime.datetime.strptime(row['sepsis_onsettime'],'%Y-%m-%d %H:%M:%S') + datetime.timedelta(hours=1) ) )
              r2 = Range(start= record_starttime, end = record_endtime)
              latest_start = max(r1.start, r2.start)
              earliest_end = min(r1.end, r2.end)
              print('latest_start: ' ,latest_start )
              print('earliest_end: ' ,earliest_end )
              

              if (r1.start <= r2.end) and (r2.start <= r1.end) :
                print('SO PLUS 1 : RECORD EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                delta=0;
                delta = ((earliest_end - latest_start).seconds )/60 
                overlap_sepsis_plus_duration_1 = overlap_sepsis_plus_duration_1 + ',' + str(delta)
                df_waveform_exists.loc[index,'SEPSIS+1_timeoverlap_exists'] = 1;
                count_overlaping_records_sepsis_plus_1 = count_overlaping_records_sepsis_plus_1 +1 ;

                #todo : adding new dataframe, exatracting required signals, computing avergage for per sminute values in case of per second sampling frequency

              else:            
                print('SO PLUS 1 : RECORD DOES NOT EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                #df_csvdata.loc[index,'timeoverlap'] = 0;



              #for sepsis_onsettime  + 2 hour
              Range='';
              r1='';
              r2='';

              Range = namedtuple('Range', ['start', 'end'])
              #datetime.timedelta(hours=24)

              r1 = Range(start= datetime.datetime.strptime(row['sepsis_onsettime'],'%Y-%m-%d %H:%M:%S'), end= (datetime.datetime.strptime(row['sepsis_onsettime'],'%Y-%m-%d %H:%M:%S') + datetime.timedelta(hours=2) ) )
              r2 = Range(start= record_starttime, end = record_endtime)
              latest_start = max(r1.start, r2.start)
              earliest_end = min(r1.end, r2.end)
              print('latest_start: ' ,latest_start )
              print('earliest_end: ' ,earliest_end )
              

              if (r1.start <= r2.end) and (r2.start <= r1.end) :
                print('SO PLUS 2 : RECORD EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                delta = 0;
                delta = ((earliest_end - latest_start).seconds )/60
                overlap_sepsis_plus_duration_2 = overlap_sepsis_plus_duration_2 + ',' + str(delta)
                df_waveform_exists.loc[index,'SEPSIS+2_timeoverlap_exists'] = 1;
                count_overlaping_records_sepsis_plus_2 = count_overlaping_records_sepsis_plus_2 +1 ;

                #todo : adding new dataframe, exatracting required signals, computing avergage for per sminute values in case of per second sampling frequency

              else:            
                print('SO PLUS 2 : RECORD DOES NOT EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                #df_csvdata.loc[index,'timeoverlap'] = 0;
              

              #for sepsis_onsettime+ 3 hour
              Range='';
              r1='';
              r2='';
              Range = namedtuple('Range', ['start', 'end'])
              r1 = Range(start= datetime.datetime.strptime(row['sepsis_onsettime'],'%Y-%m-%d %H:%M:%S'), end= (datetime.datetime.strptime(row['sepsis_onsettime'],'%Y-%m-%d %H:%M:%S') + datetime.timedelta(hours=3) ) )
              r2 = Range(start= record_starttime, end = record_endtime)
              latest_start = max(r1.start, r2.start)
              earliest_end = min(r1.end, r2.end)
              print('latest_start: ' ,latest_start )
              print('earliest_end: ' ,earliest_end )
              
              if (r1.start <= r2.end) and (r2.start <= r1.end) :
                print('SO PLUS 3 : RECORD EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                delta = 0 ;
                delta = ((earliest_end - latest_start).seconds )/60
                overlap_sepsis_plus_duration_3 = overlap_sepsis_plus_duration_3 + ',' + str(delta)
                df_waveform_exists.loc[index,'SEPSIS+3_timeoverlap_exists'] = 1;
                count_overlaping_records_sepsis_plus_3 = count_overlaping_records_sepsis_plus_3 +1 ;

                #todo : adding new dataframe, exatracting required signals, computing avergage for per sminute values in case of per second sampling frequency

              else:            
                print('SO PLUS 3 : RECORD DOES NOT EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                #df_csvdata.loc[index,'timeoverlap'] = 0;
              

              #for ssepsis_onsettime + 4 hour
              Range='';
              r1='';
              r2='';
              Range = namedtuple('Range', ['start', 'end'])

              r1 = Range(start= datetime.datetime.strptime(row['sepsis_onsettime'],'%Y-%m-%d %H:%M:%S'), end= (datetime.datetime.strptime(row['sepsis_onsettime'],'%Y-%m-%d %H:%M:%S') + datetime.timedelta(hours=4) ) )
              r2 = Range(start= record_starttime, end = record_endtime)
              latest_start = max(r1.start, r2.start)
              earliest_end = min(r1.end, r2.end)
              print('latest_start: ' ,latest_start )
              print('earliest_end: ' ,earliest_end )
              

              if (r1.start <= r2.end) and (r2.start <= r1.end) :
                print('SO PLUS 4 : RECORD EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                delta = 0;
                delta = ((earliest_end - latest_start).seconds )/60
                overlap_sepsis_plus_duration_4 = overlap_sepsis_plus_duration_4 + ',' + str(delta)
                df_waveform_exists.loc[index,'SEPSIS+4_timeoverlap_exists'] = 1;
                count_overlaping_records_sepsis_plus_4 = count_overlaping_records_sepsis_plus_4 +1 ;

                #todo : adding new dataframe, exatracting required signals, computing avergage for per sminute values in case of per second sampling frequency

              else:            
                print('SO PLUS 4 : RECORD DOES NOT EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                #df_csvdata.loc[index,'timeoverlap'] = 0;

#############################################################################
              #for sepsis onset time - 1 hour

              Range='';
              r1='';
              r2='';

              Range = namedtuple('Range', ['start', 'end'])
              r1 = Range(start= (datetime.datetime.strptime(row['sepsis_onsettime'],'%Y-%m-%d %H:%M:%S') - datetime.timedelta(hours=1) ) , end= datetime.datetime.strptime(row['sepsis_onsettime'],'%Y-%m-%d %H:%M:%S')  )
              r2 = Range(start= record_starttime, end = record_endtime)
              latest_start = max(r1.start, r2.start)
              earliest_end = min(r1.end, r2.end)
              print('latest_start: ' ,latest_start )
              print('earliest_end: ' ,earliest_end )
              

              if (r1.start <= r2.end) and (r2.start <= r1.end) :
                print('SO minus 1 : RECORD EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                delta=0;
                delta = ((earliest_end - latest_start).seconds )/60 
                overlap_sepsis_minus_duration_1 = overlap_sepsis_minus_duration_1 + ',' + str(delta)
                df_waveform_exists.loc[index,'SEPSIS-1_timeoverlap_exists'] = 1;
                count_overlaping_records_sepsis_minus_1 = count_overlaping_records_sepsis_minus_1 + 1 ;

                #todo : adding new dataframe, exatracting required signals, computing avergage for per sminute values in case of per second sampling frequency

              else:            
                print('SO minus 1 : RECORD DOES NOT EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                #df_csvdata.loc[index,'timeoverlap'] = 0;



              #for sepsis_onsettime  - 2 hour
              Range='';
              r1='';
              r2='';

              Range = namedtuple('Range', ['start', 'end'])
              #datetime.timedelta(hours=24)

              r1 = Range(start= (datetime.datetime.strptime(row['sepsis_onsettime'],'%Y-%m-%d %H:%M:%S') - datetime.timedelta(hours=2) ) , end= datetime.datetime.strptime(row['sepsis_onsettime'],'%Y-%m-%d %H:%M:%S')  )
              r2 = Range(start= record_starttime, end = record_endtime)
              latest_start = max(r1.start, r2.start)
              earliest_end = min(r1.end, r2.end)
              print('latest_start: ' ,latest_start )
              print('earliest_end: ' ,earliest_end )
              

              if (r1.start <= r2.end) and (r2.start <= r1.end) :
                print('SO minus 2 : RECORD EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                delta = 0;
                delta = ((earliest_end - latest_start).seconds )/60
                overlap_sepsis_minus_duration_2 = overlap_sepsis_minus_duration_2 + ',' + str(delta)
                df_waveform_exists.loc[index,'SEPSIS-2_timeoverlap_exists'] = 1;
                count_overlaping_records_sepsis_minus_2 = count_overlaping_records_sepsis_minus_2 +1 ;

                #todo : adding new dataframe, exatracting required signals, computing avergage for per sminute values in case of per second sampling frequency

              else:            
                print('SO minus 2 : RECORD DOES NOT EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                #df_csvdata.loc[index,'timeoverlap'] = 0;
              

              #for sepsis_onsettime - 3 hour
              Range='';
              r1='';
              r2='';
              Range = namedtuple('Range', ['start', 'end'])
              r1 = Range(start= (datetime.datetime.strptime(row['sepsis_onsettime'],'%Y-%m-%d %H:%M:%S') - datetime.timedelta(hours=3) ) , end= datetime.datetime.strptime(row['sepsis_onsettime'],'%Y-%m-%d %H:%M:%S')  )
              r2 = Range(start= record_starttime, end = record_endtime)
              latest_start = max(r1.start, r2.start)
              earliest_end = min(r1.end, r2.end)
              print('latest_start: ' ,latest_start )
              print('earliest_end: ' ,earliest_end )
              
              if (r1.start <= r2.end) and (r2.start <= r1.end) :
                print('SO minus 3 : RECORD EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                delta = 0 ;
                delta = ((earliest_end - latest_start).seconds )/60
                overlap_sepsis_minus_duration_3 = overlap_sepsis_minus_duration_3 + ',' + str(delta)
                df_waveform_exists.loc[index,'SEPSIS-3_timeoverlap_exists'] = 1;
                count_overlaping_records_sepsis_minus_3 = count_overlaping_records_sepsis_minus_3 +1 ;

                #todo : adding new dataframe, exatracting required signals, computing avergage for per sminute values in case of per second sampling frequency

              else:            
                print('SO minus 3 : RECORD DOES NOT EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                #df_csvdata.loc[index,'timeoverlap'] = 0;
              

              #for ssepsis_onsettime - 4 hour
              Range='';
              r1='';
              r2='';
              Range = namedtuple('Range', ['start', 'end'])

              r1 = Range(start= (datetime.datetime.strptime(row['sepsis_onsettime'],'%Y-%m-%d %H:%M:%S') - datetime.timedelta(hours=4) ) , end= datetime.datetime.strptime(row['sepsis_onsettime'],'%Y-%m-%d %H:%M:%S')  )
              r2 = Range(start= record_starttime, end = record_endtime)
              latest_start = max(r1.start, r2.start)
              earliest_end = min(r1.end, r2.end)
              print('latest_start: ' ,latest_start )
              print('earliest_end: ' ,earliest_end )
              

              if (r1.start <= r2.end) and (r2.start <= r1.end) :
                print('SO minus 4 : RECORD EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                delta = 0;
                delta = ((earliest_end - latest_start).seconds )/60
                overlap_sepsis_minus_duration_4 = overlap_sepsis_minus_duration_4 + ',' + str(delta)
                df_waveform_exists.loc[index,'SEPSIS-4_timeoverlap_exists'] = 1;
                count_overlaping_records_sepsis_minus_4 = count_overlaping_records_sepsis_minus_4 +1 ;

                #todo : adding new dataframe, exatracting required signals, computing avergage for per sminute values in case of per second sampling frequency

              else:            
                print('SO minus 4 : RECORD DOES NOT EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                #df_csvdata.loc[index,'timeoverlap'] = 0;
            
      #################################################################################################################

            if str(row['sepstic_shock_onsettime']) != 'nan' : 
              #for ssepstic_shock_onsettime + 1 hour

              Range='';
              r1='';
              r2='';

              Range = namedtuple('Range', ['start', 'end'])
              r1 = Range(start= datetime.datetime.strptime(row['sepstic_shock_onsettime'],'%Y-%m-%d %H:%M:%S'), end= (datetime.datetime.strptime(row['sepstic_shock_onsettime'],'%Y-%m-%d %H:%M:%S') + datetime.timedelta(hours=1) ) )
              r2 = Range(start= record_starttime, end = record_endtime)
              latest_start = max(r1.start, r2.start)
              earliest_end = min(r1.end, r2.end)
              print('latest_start: ' ,latest_start )
              print('earliest_end: ' ,earliest_end )
              

              if (r1.start <= r2.end) and (r2.start <= r1.end) :
                print('SHOCK PLUS 1 : RECORD EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                delta=0;
                delta = ((earliest_end - latest_start).seconds )/60 
                overlap_shock_plus_duration_1 = overlap_shock_plus_duration_1 + ',' + str(delta)
                df_waveform_exists.loc[index,'SHOCK+1_timeoverlap_exists'] = 1;
                count_overlaping_records_shock_plus_1 = count_overlaping_records_shock_plus_1 +1 ;

                #todo : adding new dataframe, exatracting required signals, computing avergage for per sminute values in case of per second sampling frequency

              else:            
                print('SHOCK PLUS 1 : RECORD DOES NOT EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                #df_csvdata.loc[index,'timeoverlap'] = 0;



              #for sepstic_shock_onsettime  + 2 hour
              Range='';
              r1='';
              r2='';

              Range = namedtuple('Range', ['start', 'end'])
              #datetime.timedelta(hours=24)

              r1 = Range(start= datetime.datetime.strptime(row['sepstic_shock_onsettime'],'%Y-%m-%d %H:%M:%S'), end= (datetime.datetime.strptime(row['sepstic_shock_onsettime'],'%Y-%m-%d %H:%M:%S') + datetime.timedelta(hours=2) ) )
              r2 = Range(start= record_starttime, end = record_endtime)
              latest_start = max(r1.start, r2.start)
              earliest_end = min(r1.end, r2.end)
              print('latest_start: ' ,latest_start )
              print('earliest_end: ' ,earliest_end )
              

              if (r1.start <= r2.end) and (r2.start <= r1.end) :
                print('SHOCK PLUS 2 : RECORD EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                delta = 0;
                delta = ((earliest_end - latest_start).seconds )/60
                overlap_shock_plus_duration_2 = overlap_shock_plus_duration_2 + ',' + str(delta)
                df_waveform_exists.loc[index,'SHOCK+2_timeoverlap_exists'] = 1;
                count_overlaping_records_shock_plus_2 = count_overlaping_records_shock_plus_2 +1 ;

                #todo : adding new dataframe, exatracting required signals, computing avergage for per sminute values in case of per second sampling frequency

              else:            
                print('SHOCK PLUS 2 : RECORD DOES NOT EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                #df_csvdata.loc[index,'timeoverlap'] = 0;
              

              #for sepstic_shock_onsettime + 3 hour
              Range='';
              r1='';
              r2='';
              Range = namedtuple('Range', ['start', 'end'])
              r1 = Range(start= datetime.datetime.strptime(row['sepstic_shock_onsettime'],'%Y-%m-%d %H:%M:%S'), end= (datetime.datetime.strptime(row['sepstic_shock_onsettime'],'%Y-%m-%d %H:%M:%S') + datetime.timedelta(hours=3) ) )
              r2 = Range(start= record_starttime, end = record_endtime)
              latest_start = max(r1.start, r2.start)
              earliest_end = min(r1.end, r2.end)
              print('latest_start: ' ,latest_start )
              print('earliest_end: ' ,earliest_end )
              
              if (r1.start <= r2.end) and (r2.start <= r1.end) :
                print('SHOCK PLUS 3 : RECORD EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                delta = 0 ;
                delta = ((earliest_end - latest_start).seconds )/60
                overlap_shock_plus_duration_3 = overlap_shock_plus_duration_3 + ',' + str(delta)
                df_waveform_exists.loc[index,'SHOCK+3_timeoverlap_exists'] = 1;
                count_overlaping_records_shock_plus_3 = count_overlaping_records_shock_plus_3 +1 ;

                #todo : adding new dataframe, exatracting required signals, computing avergage for per sminute values in case of per second sampling frequency

              else:            
                print('SHOCK PLUS 3 : RECORD DOES NOT EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                #df_csvdata.loc[index,'timeoverlap'] = 0;
              

              #for sepstic_shock_onsettime + 4 hour
              Range='';
              r1='';
              r2='';
              Range = namedtuple('Range', ['start', 'end'])

              r1 = Range(start= datetime.datetime.strptime(row['sepstic_shock_onsettime'],'%Y-%m-%d %H:%M:%S'), end= (datetime.datetime.strptime(row['sepstic_shock_onsettime'],'%Y-%m-%d %H:%M:%S') + datetime.timedelta(hours=4) ) )
              r2 = Range(start= record_starttime, end = record_endtime)
              latest_start = max(r1.start, r2.start)
              earliest_end = min(r1.end, r2.end)
              print('latest_start: ' ,latest_start )
              print('earliest_end: ' ,earliest_end )
              

              if (r1.start <= r2.end) and (r2.start <= r1.end) :
                print('SHOCK PLUS 4 : RECORD EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                delta = 0;
                delta = ((earliest_end - latest_start).seconds )/60
                overlap_shock_plus_duration_4 = overlap_shock_plus_duration_4 + ',' + str(delta)
                df_waveform_exists.loc[index,'SHOCK+4_timeoverlap_exists'] = 1;
                count_overlaping_records_shock_plus_4 = count_overlaping_records_shock_plus_4 +1 ;

                #todo : adding new dataframe, exatracting required signals, computing avergage for per sminute values in case of per second sampling frequency

              else:            
                print('SHOCK PLUS 4 : RECORD DOES NOT EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                #df_csvdata.loc[index,'timeoverlap'] = 0;

#############################################################################
              #for sepstic_shock_onsettime - 1 hour

              Range='';
              r1='';
              r2='';

              Range = namedtuple('Range', ['start', 'end'])
              r1 = Range(start= (datetime.datetime.strptime(row['sepstic_shock_onsettime'],'%Y-%m-%d %H:%M:%S') - datetime.timedelta(hours=1) ) , end= datetime.datetime.strptime(row['sepstic_shock_onsettime'],'%Y-%m-%d %H:%M:%S')  )
              r2 = Range(start= record_starttime, end = record_endtime)
              latest_start = max(r1.start, r2.start)
              earliest_end = min(r1.end, r2.end)
              print('latest_start: ' ,latest_start )
              print('earliest_end: ' ,earliest_end )
              

              if (r1.start <= r2.end) and (r2.start <= r1.end) :
                print('SHOCK MINUS 1 : RECORD EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                delta=0;
                delta = ((earliest_end - latest_start).seconds )/60 
                overlap_shock_minus_duration_1 = overlap_shock_minus_duration_1 + ',' + str(delta)
                df_waveform_exists.loc[index,'SHOCK-1_timeoverlap_exists'] = 1;
                count_overlaping_records_shock_minus_1 = count_overlaping_records_shock_minus_1 + 1 ;

                #todo : adding new dataframe, exatracting required signals, computing avergage for per sminute values in case of per second sampling frequency

              else:            
                print('SHOCK MINUS 1 : RECORD DOES NOT EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                #df_csvdata.loc[index,'timeoverlap'] = 0;



              #for sepstic_shock_onsettime  - 2 hour
              Range='';
              r1='';
              r2='';

              Range = namedtuple('Range', ['start', 'end'])
              #datetime.timedelta(hours=24)

              r1 = Range(start= (datetime.datetime.strptime(row['sepstic_shock_onsettime'],'%Y-%m-%d %H:%M:%S') - datetime.timedelta(hours=2) ) , end= datetime.datetime.strptime(row['sepstic_shock_onsettime'],'%Y-%m-%d %H:%M:%S')  )
              r2 = Range(start= record_starttime, end = record_endtime)
              latest_start = max(r1.start, r2.start)
              earliest_end = min(r1.end, r2.end)
              print('latest_start: ' ,latest_start )
              print('earliest_end: ' ,earliest_end )
              

              if (r1.start <= r2.end) and (r2.start <= r1.end) :
                print('SHOCK MINUS 2 : RECORD EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                delta = 0;
                delta = ((earliest_end - latest_start).seconds )/60
                overlap_shock_minus_duration_2 = overlap_shock_minus_duration_2 + ',' + str(delta)
                df_waveform_exists.loc[index,'SHOCK-2_timeoverlap_exists'] = 1;
                count_overlaping_records_shock_minus_2 = count_overlaping_records_shock_minus_2 +1 ;

                #todo : adding new dataframe, exatracting required signals, computing avergage for per sminute values in case of per second sampling frequency

              else:            
                print('SHOCK MINUS 2 : RECORD DOES NOT EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                #df_csvdata.loc[index,'timeoverlap'] = 0;
              

              #for sepstic_shock_onsettime - 3 hour
              Range='';
              r1='';
              r2='';
              Range = namedtuple('Range', ['start', 'end'])
              r1 = Range(start= (datetime.datetime.strptime(row['sepstic_shock_onsettime'],'%Y-%m-%d %H:%M:%S') - datetime.timedelta(hours=3) ) , end= datetime.datetime.strptime(row['sepstic_shock_onsettime'],'%Y-%m-%d %H:%M:%S')  )
              r2 = Range(start= record_starttime, end = record_endtime)
              latest_start = max(r1.start, r2.start)
              earliest_end = min(r1.end, r2.end)
              print('latest_start: ' ,latest_start )
              print('earliest_end: ' ,earliest_end )
              
              if (r1.start <= r2.end) and (r2.start <= r1.end) :
                print('SHOCK MINUS 3 : RECORD EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                delta = 0 ;
                delta = ((earliest_end - latest_start).seconds )/60
                overlap_shock_minus_duration_3 = overlap_shock_minus_duration_3 + ',' + str(delta)
                df_waveform_exists.loc[index,'SHOCK-3_timeoverlap_exists'] = 1;
                count_overlaping_records_shock_minus_3 = count_overlaping_records_shock_minus_3 +1 ;

                #todo : adding new dataframe, exatracting required signals, computing avergage for per sminute values in case of per second sampling frequency

              else:            
                print('SHOCK MINUS 3 : RECORD DOES NOT EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                #df_csvdata.loc[index,'timeoverlap'] = 0;
              

              #for sepstic_shock_onsettime - 4 hour
              Range='';
              r1='';
              r2='';
              Range = namedtuple('Range', ['start', 'end'])

              r1 = Range(start= (datetime.datetime.strptime(row['sepstic_shock_onsettime'],'%Y-%m-%d %H:%M:%S') - datetime.timedelta(hours=4) ) , end= datetime.datetime.strptime(row['sepstic_shock_onsettime'],'%Y-%m-%d %H:%M:%S')  )
              r2 = Range(start= record_starttime, end = record_endtime)
              latest_start = max(r1.start, r2.start)
              earliest_end = min(r1.end, r2.end)
              print('latest_start: ' ,latest_start )
              print('earliest_end: ' ,earliest_end )
              

              if (r1.start <= r2.end) and (r2.start <= r1.end) :
                print('SHOCK MINUS 4 : RECORD EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                delta = 0;
                delta = ((earliest_end - latest_start).seconds )/60
                overlap_shock_minus_duration_4 = overlap_shock_minus_duration_4 + ',' + str(delta)
                df_waveform_exists.loc[index,'SHOCK-4_timeoverlap_exists'] = 1;
                count_overlaping_records_shock_minus_4 = count_overlaping_records_shock_minus_4 +1 ;

                #todo : adding new dataframe, exatracting required signals, computing avergage for per sminute values in case of per second sampling frequency

              else:            
                print('SHOCK MINUS 4 : RECORD DOES NOT EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
                #df_csvdata.loc[index,'timeoverlap'] = 0;
                
        ###########################################################

            #for ICU OUTTIME - 1 hour
            Range='';

            r1='';
            r2='';

            Range = namedtuple('Range', ['start', 'end'])
            r1 = Range(start= (datetime.datetime.strptime(row['outtime'],'%Y-%m-%d %H:%M:%S') - datetime.timedelta(hours=1) ) , end = datetime.datetime.strptime(row['outtime'],'%Y-%m-%d %H:%M:%S')  )
            r2 = Range(start= record_starttime, end = record_endtime)
            latest_start = max(r1.start, r2.start)
            earliest_end = min(r1.end, r2.end)
            print('latest_start: ' ,latest_start )
            print('earliest_end: ' ,earliest_end )
            

            if (r1.start <= r2.end) and (r2.start <= r1.end) :
              print('OUT - 1 : RECORD EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
              delta=0;
              delta = ((earliest_end - latest_start).seconds )/60 
              overlap_duration_outtime_1 = overlap_duration_outtime_1 + ',' + str(delta)
              df_waveform_exists.loc[index,'OUT-1_timeoverlap_exists'] = 1;
              count_overlaping_records_outtime_1 = count_overlaping_records_outtime_1 +1 ;

              #todo : adding new dataframe, exatracting required signals, computing avergage for per sminute values in case of per second sampling frequency

            else:            
              print('OUT - 1 : RECORD DOES NOT EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
              #df_csvdata.loc[index,'timeoverlap'] = 0;



            #for ICU OUTTIME - 2 hourS
            Range='';
            r1='';
            r2='';

            Range = namedtuple('Range', ['start', 'end'])
            #datetime.timedelta(hours=24)

            r1 = Range(start= (datetime.datetime.strptime(row['outtime'],'%Y-%m-%d %H:%M:%S') - datetime.timedelta(hours=2) ) , end = datetime.datetime.strptime(row['outtime'],'%Y-%m-%d %H:%M:%S')  )
            r2 = Range(start= record_starttime, end = record_endtime)
            latest_start = max(r1.start, r2.start)
            earliest_end = min(r1.end, r2.end)
            print('latest_start: ' ,latest_start )
            print('earliest_end: ' ,earliest_end )
            

            if (r1.start <= r2.end) and (r2.start <= r1.end) :
              print('OUT - 2 : RECORD EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
              delta = 0;
              delta = ((earliest_end - latest_start).seconds )/60
              overlap_duration_outtime_2 = overlap_duration_outtime_2 + ',' + str(delta)
              df_waveform_exists.loc[index,'OUT-2_timeoverlap_exists'] = 1;
              count_overlaping_records_outtime_2 = count_overlaping_records_outtime_2 +1 ;

              #todo : adding new dataframe, exatracting required signals, computing avergage for per sminute values in case of per second sampling frequency

            else:            
              print('OUT - 2 : RECORD DOES NOT EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
              #df_csvdata.loc[index,'timeoverlap'] = 0;
            

            #for ICU OUTTIME - 3 HOURS
            Range='';
            r1='';
            r2='';
            Range = namedtuple('Range', ['start', 'end'])
            print('record icu time - 3: ', (datetime.datetime.strptime(row['outtime'],'%Y-%m-%d %H:%M:%S') - datetime.timedelta(hours=3) ))
            r1 = Range(start= (datetime.datetime.strptime(row['outtime'],'%Y-%m-%d %H:%M:%S') - datetime.timedelta(hours=3) ) , end = datetime.datetime.strptime(row['outtime'],'%Y-%m-%d %H:%M:%S')  )
            r2 = Range(start= record_starttime, end = record_endtime)
            latest_start = max(r1.start, r2.start)
            earliest_end = min(r1.end, r2.end)
            print('latest_start: ' ,latest_start )
            print('earliest_end: ' ,earliest_end )
            
            if (r1.start <= r2.end) and (r2.start <= r1.end) :
              print('OUT - 3 : RECORD EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
              delta = 0 ;
              delta = ((earliest_end - latest_start).seconds )/60
              overlap_duration_outtime_3 = overlap_duration_outtime_3 + ',' + str(delta)
              df_waveform_exists.loc[index,'OUT-3_timeoverlap_exists'] = 1;
              count_overlaping_records_outtime_3 = count_overlaping_records_outtime_3 +1 ;

              #todo : adding new dataframe, exatracting required signals, computing avergage for per sminute values in case of per second sampling frequency

            else:            
              print('OUT - 3 : RECORD DOES NOT EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
              #df_csvdata.loc[index,'timeoverlap'] = 0;
            

            #for OUT - 4 hour
            Range='';
            r1='';
            r2='';
            Range = namedtuple('Range', ['start', 'end'])
            print('record icu time - 4: ', (datetime.datetime.strptime(row['outtime'],'%Y-%m-%d %H:%M:%S') - datetime.timedelta(hours=4) ))
            r1 = Range(start= (datetime.datetime.strptime(row['outtime'],'%Y-%m-%d %H:%M:%S') - datetime.timedelta(hours=4) ) , end = datetime.datetime.strptime(row['outtime'],'%Y-%m-%d %H:%M:%S')  )
            r2 = Range(start= record_starttime, end = record_endtime)
            latest_start = max(r1.start, r2.start)
            earliest_end = min(r1.end, r2.end)
            print('latest_start: ' ,latest_start )
            print('earliest_end: ' ,earliest_end )
            

            if (r1.start <= r2.end) and (r2.start <= r1.end) :
              print('OUT - 4 : RECORD EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
              delta = 0;
              delta = ((earliest_end - latest_start).seconds )/60
              overlap_duration_outtime_4 = overlap_duration_outtime_4 + ',' + str(delta)
              df_waveform_exists.loc[index,'OUT-4_timeoverlap_exists'] = 1;
              count_overlaping_records_outtime_4 = count_overlaping_records_outtime_4 +1 ;

              #todo : adding new dataframe, exatracting required signals, computing avergage for per sminute values in case of per second sampling frequency

            else:            
              print('OUT - 4 : RECORD DOES NOT EXISTS FOR THE ICU STAYS WITH THE SIGNALS NEEDED AND TIME OVERLAP: ', row['subject_id'])
              #df_csvdata.loc[index,'timeoverlap'] = 0;

          else:
            #df_csvdata.loc[index,'sig_exists'] =  0 ;
            print('DO NOT SELECT THIS RECORD', row['subject_id'])
        except ValueError:
          print('Error occured while reading waveform: ', record);

    df_waveform_exists.loc[index,'SI+1_Number_of_overlaping_records'] = count_overlaping_records_1;
    df_waveform_exists.loc[index,'SI+1_overlap_duration'] = overlap_duration_1 # overlap between suspected infection + 1 hour and record time

    df_waveform_exists.loc[index,'SI+2_Number_of_overlaping_records'] = count_overlaping_records_2;
    df_waveform_exists.loc[index,'SI+2_overlap_duration'] = overlap_duration_2 # overlap between suspected infection + 1 hour and record time

    df_waveform_exists.loc[index,'SI+3_Number_of_overlaping_records'] = count_overlaping_records_3;
    df_waveform_exists.loc[index,'SI+3_overlap_duration'] = overlap_duration_3 # overlap between suspected infection + 1 hour and record time

    df_waveform_exists.loc[index,'SI+4_Number_of_overlaping_records'] = count_overlaping_records_4;
    df_waveform_exists.loc[index,'SI+4_overlap_duration'] = overlap_duration_4 # overlap between suspected infection + 1 hour and record time
##################################################################################################################################################

    df_waveform_exists.loc[index,'OUT-1_Number_of_overlaping_records'] = count_overlaping_records_outtime_1;
    df_waveform_exists.loc[index,'OUT-1_overlap_duration'] = overlap_duration_outtime_1 # overlap between suspected infection + 1 hour and record time

    df_waveform_exists.loc[index,'OUT-2_Number_of_overlaping_records'] = count_overlaping_records_outtime_2;
    df_waveform_exists.loc[index,'OUT-2_overlap_duration'] = overlap_duration_outtime_2 # overlap between suspected infection + 1 hour and record time

    df_waveform_exists.loc[index,'OUT-3_Number_of_overlaping_records'] = count_overlaping_records_outtime_3;
    df_waveform_exists.loc[index,'OUT-3_overlap_duration'] = overlap_duration_outtime_3 # overlap between suspected infection + 1 hour and record time

    df_waveform_exists.loc[index,'OUT-4_Number_of_overlaping_records'] = count_overlaping_records_outtime_4;
    df_waveform_exists.loc[index,'OUT-4_overlap_duration'] = overlap_duration_outtime_4 # overlap between suspected infection + 1 hour and record time

##########################################.  start     
    df_waveform_exists.loc[index,'SEPSIS+1_Number_of_overlaping_records'] = count_overlaping_records_sepsis_plus_1;
    df_waveform_exists.loc[index,'SEPSIS+1_overlap_duration'] = overlap_sepsis_plus_duration_1 # overlap between suspected infection + 1 hour and record time

    df_waveform_exists.loc[index,'SEPSIS+2_Number_of_overlaping_records'] = count_overlaping_records_sepsis_plus_2;
    df_waveform_exists.loc[index,'SEPSIS+2_overlap_duration'] = overlap_sepsis_plus_duration_2 # overlap between suspected infection + 1 hour and record time

    df_waveform_exists.loc[index,'SEPSIS+3_Number_of_overlaping_records'] = count_overlaping_records_sepsis_plus_3;
    df_waveform_exists.loc[index,'SEPSIS+3_overlap_duration'] = overlap_sepsis_plus_duration_3 # overlap between suspected infection + 1 hour and record time

    df_waveform_exists.loc[index,'SEPSIS+4_Number_of_overlaping_records'] = count_overlaping_records_sepsis_plus_4;
    df_waveform_exists.loc[index,'SEPSIS+4_overlap_duration'] = overlap_sepsis_plus_duration_4 # overlap between suspected infection + 1 hour and record time

    ###

    df_waveform_exists.loc[index,'SEPSIS-1_Number_of_overlaping_records'] = count_overlaping_records_sepsis_minus_1; #TODO
    df_waveform_exists.loc[index,'SEPSIS-1_overlap_duration'] = overlap_sepsis_minus_duration_1 # overlap between suspected infection + 1 hour and record time

    df_waveform_exists.loc[index,'SEPSIS-2_Number_of_overlaping_records'] = count_overlaping_records_sepsis_minus_2;
    df_waveform_exists.loc[index,'SEPSIS-2_overlap_duration'] = overlap_sepsis_minus_duration_2 # overlap between suspected infection + 1 hour and record time

    df_waveform_exists.loc[index,'SEPSIS-3_Number_of_overlaping_records'] = count_overlaping_records_sepsis_minus_3;
    df_waveform_exists.loc[index,'SEPSIS-3_overlap_duration'] = overlap_sepsis_minus_duration_3 # overlap between suspected infection + 1 hour and record time

    df_waveform_exists.loc[index,'SEPSIS-4_Number_of_overlaping_records'] = count_overlaping_records_sepsis_minus_4;
    df_waveform_exists.loc[index,'SEPSIS-4_overlap_duration'] = overlap_sepsis_minus_duration_4 # overlap between suspected infection + 1 hour and record time

   ####

    df_waveform_exists.loc[index,'SHOCK+1_Number_of_overlaping_records'] = count_overlaping_records_shock_plus_1;
    df_waveform_exists.loc[index,'SHOCK+1_overlap_duration'] = overlap_shock_plus_duration_1 # overlap between suspected infection + 1 hour and record time

    df_waveform_exists.loc[index,'SHOCK+2_Number_of_overlaping_records'] = count_overlaping_records_shock_plus_2;
    df_waveform_exists.loc[index,'SHOCK+2_overlap_duration'] = overlap_shock_plus_duration_2 # overlap between suspected infection + 1 hour and record time

    df_waveform_exists.loc[index,'SHOCK+3_Number_of_overlaping_records'] = count_overlaping_records_shock_plus_3;
    df_waveform_exists.loc[index,'SHOCK+3_overlap_duration'] = overlap_shock_plus_duration_3 # overlap between suspected infection + 1 hour and record time

    df_waveform_exists.loc[index,'SHOCK+4_Number_of_overlaping_records'] = count_overlaping_records_shock_plus_4;
    df_waveform_exists.loc[index,'SHOCK+4_overlap_duration'] = overlap_shock_plus_duration_4 # overlap between suspected infection + 1 hour and record time
    #####

    df_waveform_exists.loc[index,'SHOCK-1_Number_of_overlaping_records'] = count_overlaping_records_shock_minus_1;
    df_waveform_exists.loc[index,'SHOCK-1_overlap_duration'] = overlap_shock_minus_duration_1 # overlap between suspected infection + 1 hour and record time

    df_waveform_exists.loc[index,'SHOCK-2_Number_of_overlaping_records'] = count_overlaping_records_shock_minus_2;
    df_waveform_exists.loc[index,'SHOCK-2_overlap_duration'] = overlap_shock_minus_duration_2 # overlap between suspected infection + 1 hour and record time

    df_waveform_exists.loc[index,'SHOCK-3_Number_of_overlaping_records'] = count_overlaping_records_shock_minus_3;
    df_waveform_exists.loc[index,'SHOCK-3_overlap_duration'] = overlap_shock_minus_duration_3 # overlap between suspected infection + 1 hour and record time

    df_waveform_exists.loc[index,'SHOCK-4_Number_of_overlaping_records'] = count_overlaping_records_shock_minus_4;
    df_waveform_exists.loc[index,'SHOCK-4_overlap_duration'] = overlap_shock_minus_duration_4 # overlap between suspected infection + 1 hour and record time

print(df_waveform_exists.shape)
df_waveform_exists.to_csv ('Check_TSdata_exists_susInfect_icuout_sepsis_shock_onsettime.csv', sep=',', index = False, header=True);

#df_with_6_Signals.drop(df_with_6_Signals.index, inplace=True)

df_with_6_Signals = df_waveform_exists[(df_waveform_exists['6_sig_exists']==1) & (df_waveform_exists['sepsis_onsettime'].notnull())] # add and sepsis onset time is not null
print(df_with_6_Signals.shape)

print('---------------------for Suspected infection + 1,2,3,4------------------------')

print( 'Number of patients with recording for Suspected infection + 1 hour : ' , df_with_6_Signals[df_with_6_Signals['SI+1_timeoverlap_exists']==1].shape[0] )
print( 'Number of patients with recording for Suspected infection + 2 hours : ' , df_with_6_Signals[df_with_6_Signals['SI+2_timeoverlap_exists']==1].shape[0] )
print( 'Number of patients with recording for Suspected infection + 3 hours : ' , df_with_6_Signals[df_with_6_Signals['SI+3_timeoverlap_exists']==1].shape[0] )
print( 'Number of patients with recording for Suspected infection + 4 hours : ' , df_with_6_Signals[df_with_6_Signals['SI+4_timeoverlap_exists']==1].shape[0] )

print('---------------------for ICU outtime - 1,2,3,4-------------------------------')

print( 'Number of patients with recording for ICU outtime - 1 hour : ' , df_with_6_Signals[df_with_6_Signals['OUT-1_timeoverlap_exists']==1].shape[0] )
print( 'Number of patients with recording for ICU outtime - 2 hours : ' , df_with_6_Signals[df_with_6_Signals['OUT-2_timeoverlap_exists']==1].shape[0] )
print( 'Number of patients with recording for ICU outtime - 3 hours : ' , df_with_6_Signals[df_with_6_Signals['OUT-3_timeoverlap_exists']==1].shape[0] )
print( 'Number of patients with recording for ICU outtime - 4 hours : ' , df_with_6_Signals[df_with_6_Signals['OUT-4_timeoverlap_exists']==1].shape[0] )

print('---------------------------for Sepsis onset time + 1,2,3,4----------------------------')

print( 'Number of patients with recording for Sepsis onset time + 1 hour : ' , df_with_6_Signals[df_with_6_Signals['SEPSIS+1_timeoverlap_exists']==1].shape[0] )
print( 'Number of patients with recording for Sepsis onset time + 2 hours : ' , df_with_6_Signals[df_with_6_Signals['SEPSIS+2_timeoverlap_exists']==1].shape[0] )
print( 'Number of patients with recording for Sepsis onset time + 3 hours : ' , df_with_6_Signals[df_with_6_Signals['SEPSIS+3_timeoverlap_exists']==1].shape[0] )
print( 'Number of patients with recording for Sepsis onset time + 4 hours : ' , df_with_6_Signals[df_with_6_Signals['SEPSIS+4_timeoverlap_exists']==1].shape[0] )

print('---------------------for Sepsis onset time - 1,2,3,4------------------------')

print( 'Number of patients with recording for Sepsis onset time - 1 hour : ' , df_with_6_Signals[df_with_6_Signals['SEPSIS-1_timeoverlap_exists']==1].shape[0] )
print( 'Number of patients with recording for Sepsis onset time - 2 hours : ' , df_with_6_Signals[df_with_6_Signals['SEPSIS-2_timeoverlap_exists']==1].shape[0] )
print( 'Number of patients with recording for Sepsis onset time - 3 hours : ' , df_with_6_Signals[df_with_6_Signals['SEPSIS-3_timeoverlap_exists']==1].shape[0] )
print( 'Number of patients with recording for Sepsis onset time - 4 hours : ' , df_with_6_Signals[df_with_6_Signals['SEPSIS-4_timeoverlap_exists']==1].shape[0] )

print('--------------------for Septic shock onset time + 1,2,3,4-------------------------')

print( 'Number of patients with recording for Septic shock onset time + 1 hour : ' , df_with_6_Signals[df_with_6_Signals['SHOCK+1_timeoverlap_exists']==1].shape[0] )
print( 'Number of patients with recording for Septic shock onset time + 2 hours : ' , df_with_6_Signals[df_with_6_Signals['SHOCK+2_timeoverlap_exists']==1].shape[0] )
print( 'Number of patients with recording for Septic shock onset time + 3 hours : ' , df_with_6_Signals[df_with_6_Signals['SHOCK+3_timeoverlap_exists']==1].shape[0] )
print( 'Number of patients with recording for Septic shock onset time + 4 hours : ' , df_with_6_Signals[df_with_6_Signals['SHOCK+4_timeoverlap_exists']==1].shape[0] )

print('---------------------for Septic shock onset time - 1,2,3,4----------------------------')

print( 'Number of patients with recording for Septic shock onset time - 1 hour : ' , df_with_6_Signals[df_with_6_Signals['SHOCK-1_timeoverlap_exists']==1].shape[0] )
print( 'Number of patients with recording for Septic shock onset time - 2 hours : ' , df_with_6_Signals[df_with_6_Signals['SHOCK-2_timeoverlap_exists']==1].shape[0] )
print( 'Number of patients with recording for Septic shock onset time - 3 hours : ' , df_with_6_Signals[df_with_6_Signals['SHOCK-3_timeoverlap_exists']==1].shape[0] )
print( 'Number of patients with recording for Septic shock onset time - 4 hours : ' , df_with_6_Signals[df_with_6_Signals['SHOCK-4_timeoverlap_exists']==1].shape[0] )

#combinations

print('----------------------suspected infection + 1,2,3,4 AND ICU out time - 1,2,3,4--------------')

# suspected infection + 1,2,3,4 AND ICU out time - 1,2,3,4
print( 'Number of patients with recording for Suspected infection + 1, Out - 1 : ' , df_with_6_Signals[(df_with_6_Signals['SI+1_timeoverlap_exists']==1) & ( df_with_6_Signals['OUT-1_timeoverlap_exists']==1) ].shape[0] )
print( 'Number of patients with recording for Suspected infection + 2, Out - 2 : ' , df_with_6_Signals[(df_with_6_Signals['SI+2_timeoverlap_exists']==1) & ( df_with_6_Signals['OUT-2_timeoverlap_exists']==1) ].shape[0] )
print( 'Number of patients with recording for Suspected infection + 3, Out - 3 : ' , df_with_6_Signals[(df_with_6_Signals['SI+3_timeoverlap_exists']==1) & ( df_with_6_Signals['OUT-3_timeoverlap_exists']==1) ].shape[0] )
print( 'Number of patients with recording for Suspected infection + 4, Out - 4 : ' , df_with_6_Signals[(df_with_6_Signals['SI+4_timeoverlap_exists']==1) & ( df_with_6_Signals['OUT-4_timeoverlap_exists']==1) ].shape[0] )

print('-------suspected infection + 1,2,3,4 AND Sepsis onset time - 1,2,3,4 - to predict sepsis------------')

# suspected infection + 1,2,3,4 AND Sepsis onset time - 1,2,3,4 - to predict sepsis.
print( 'Number of patients with recording for Suspected infection + 1, Sepsis onset time - 1 : ' , df_with_6_Signals[(df_with_6_Signals['SI+1_timeoverlap_exists']==1) & ( df_with_6_Signals['SEPSIS-1_timeoverlap_exists']==1) ].shape[0] )
print( 'Number of patients with recording for Suspected infection + 2, Sepsis onset time - 2 : ' , df_with_6_Signals[(df_with_6_Signals['SI+2_timeoverlap_exists']==1) & ( df_with_6_Signals['SEPSIS-2_timeoverlap_exists']==1) ].shape[0] )
print( 'Number of patients with recording for Suspected infection + 3, Sepsis onset time - 3 : ' , df_with_6_Signals[(df_with_6_Signals['SI+3_timeoverlap_exists']==1) & ( df_with_6_Signals['SEPSIS-3_timeoverlap_exists']==1) ].shape[0] )
print( 'Number of patients with recording for Suspected infection + 4, Sepsis onset time - 4 : ' , df_with_6_Signals[(df_with_6_Signals['SI+4_timeoverlap_exists']==1) & ( df_with_6_Signals['SEPSIS-4_timeoverlap_exists']==1) ].shape[0] )

print('---------suspected infection + 1,2,3,4 AND Sepsis onset time - 1,2,3,4  AND sepsis onset time + 1,2,3,4 AND Septic shock -1,2,3,4 - to predict septic shock right from suspected infection------')

# suspected infection + 1,2,3,4 AND Sepsis onset time - 1,2,3,4  AND sepsis onset time + 1,2,3,4 AND Septic shock -1,2,3,4 - to predict septic shock right from suspected infection .
print( 'Number of patients with recording for Suspected infection + 1, Sepsis onset time - 1, sepsis onset time + 1, Septic shock - 1 : ' , df_with_6_Signals[(df_with_6_Signals['SI+1_timeoverlap_exists']==1) & ( df_with_6_Signals['SEPSIS-1_timeoverlap_exists']==1) & ( df_with_6_Signals['SEPSIS+1_timeoverlap_exists']==1) & ( df_with_6_Signals['SHOCK-1_timeoverlap_exists']==1) ].shape[0] )
print( 'Number of patients with recording for Suspected infection + 2, Sepsis onset time - 2, sepsis onset time + 2, Septic shock - 2 : ' , df_with_6_Signals[(df_with_6_Signals['SI+2_timeoverlap_exists']==1) & ( df_with_6_Signals['SEPSIS-2_timeoverlap_exists']==1) & ( df_with_6_Signals['SEPSIS+2_timeoverlap_exists']==1) & ( df_with_6_Signals['SHOCK-2_timeoverlap_exists']==1) ].shape[0] )
print( 'Number of patients with recording for Suspected infection + 3, Sepsis onset time - 3, sepsis onset time + 3, Septic shock - 3 : ' , df_with_6_Signals[(df_with_6_Signals['SI+3_timeoverlap_exists']==1) & ( df_with_6_Signals['SEPSIS-3_timeoverlap_exists']==1) & ( df_with_6_Signals['SEPSIS+3_timeoverlap_exists']==1) & ( df_with_6_Signals['SHOCK-3_timeoverlap_exists']==1) ].shape[0] )
print( 'Number of patients with recording for Suspected infection + 4, Sepsis onset time - 4, sepsis onset time + 4, Septic shock - 4 : ' , df_with_6_Signals[(df_with_6_Signals['SI+4_timeoverlap_exists']==1) & ( df_with_6_Signals['SEPSIS-4_timeoverlap_exists']==1) & ( df_with_6_Signals['SEPSIS+4_timeoverlap_exists']==1) & ( df_with_6_Signals['SHOCK-4_timeoverlap_exists']==1) ].shape[0] )

print('---------sepsis onset time + 1,2,3,4 AND Septic shock -1,2,3,4 AND Septic shock + 1,2,3,4 - to check around sepsis and septic shock-------------------')

# sepsis onset time + 1,2,3,4 AND Septic shock -1,2,3,4 AND Septic shock + 1,2,3,4 - to check around sepsis and septic shock
print( 'Number of patients with recording for sepsis onset time + 1, Septic shock - 1, Septic shock + 1 : ' , df_with_6_Signals[( df_with_6_Signals['SEPSIS+1_timeoverlap_exists']==1) & ( df_with_6_Signals['SHOCK-1_timeoverlap_exists']==1) & ( df_with_6_Signals['SHOCK+1_timeoverlap_exists']==1) ].shape[0] )
print( 'Number of patients with recording for sepsis onset time + 2, Septic shock - 2, Septic shock + 2 : ' , df_with_6_Signals[( df_with_6_Signals['SEPSIS+2_timeoverlap_exists']==1) & ( df_with_6_Signals['SHOCK-2_timeoverlap_exists']==1) & ( df_with_6_Signals['SHOCK+2_timeoverlap_exists']==1) ].shape[0] )
print( 'Number of patients with recording for sepsis onset time + 3, Septic shock - 3, Septic shock + 3 : ' , df_with_6_Signals[( df_with_6_Signals['SEPSIS+3_timeoverlap_exists']==1) & ( df_with_6_Signals['SHOCK-3_timeoverlap_exists']==1) & ( df_with_6_Signals['SHOCK+3_timeoverlap_exists']==1) ].shape[0] )
print( 'Number of patients with recording for sepsis onset time + 4, Septic shock - 4, Septic shock + 4 : ', df_with_6_Signals[( df_with_6_Signals['SEPSIS+4_timeoverlap_exists']==1) & ( df_with_6_Signals['SHOCK-4_timeoverlap_exists']==1) & ( df_with_6_Signals['SHOCK+4_timeoverlap_exists']==1) ].shape[0] )

# to get patients with sepsis and septic shock and 6 signals 
# and time overlap with sepsis and septick shock onset time
print( df_with_6_Signals[( df_with_6_Signals['SEPSIS+4_timeoverlap_exists']==1) & ( df_with_6_Signals['SHOCK-4_timeoverlap_exists']==1) & ( df_with_6_Signals['SHOCK+4_timeoverlap_exists']==1) ] )

# to get patients with ONLY sepsis and NO septic shock and 6 signals and time overlap with sepsis onset time
df_only_sepsis = df_with_6_Signals[( df_with_6_Signals['SEPSIS+4_timeoverlap_exists']==1) & ( df_with_6_Signals['SEPSIS-4_timeoverlap_exists']==1) & (df_waveform_exists['sepstic_shock_onsettime'].isnull()) ] 
print(df_only_sepsis.subject_id)

# to get non sepsis patients with 6 signals and time overlap with outtime
df_test = df_waveform_exists[(df_waveform_exists['6_sig_exists']==1) & (df_waveform_exists['sepsis_onsettime'].isnull()) & ( df_with_6_Signals['OUT-4_timeoverlap_exists']==1)] # add and sepsis onset time is not null
print(df_test.subject_id)