# -*- coding: utf-8 -*-
"""DTWSOM_DataClustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pdTdYJS8SbSsyT24UyewcO9bkAOx_Wmg
"""

!pip install dtw_som
import dtwsom
import math
import random
import numpy as np
import matplotlib.pyplot as plt
from pyclustering.nnet.som import type_conn

# Commented out IPython magic to ensure Python compatibility.
# %time
rows = 3
cols = 3
structure = type_conn.grid_four
parameters = dtwsom.DtwSomParameters()
#parameters.init_type = dtwsom.DtwTypeInit.anchors
network = dtwsom.DtwSom(rows, cols, structure, parameters=parameters)

print(df.shape)
print(df.to_numpy().tolist())
df_Values = df.to_numpy().tolist();

import pandas as pd
from sklearn.preprocessing import MinMaxScaler


scaler = MinMaxScaler()


df_normalize = scaler.fit_transform(df_Values)
print(df_normalize)

network.train(df_Values, 40)

network.show_distance_matrix()
network.show_winner_matrix()

"""
n_neurons = network._size
fig, axs = plt.subplots(3,3,figsize=(20, 10), sharey=True)
for neuron_index in range(n_neurons):
    col = math.floor(neuron_index/3)
    row = neuron_index % 3
    neuron_weights = network._weights[neuron_index]
    axs[row, col].plot(np.arange(len(neuron_weights)), neuron_weights, label=str(neuron_index))
    axs[row, col].set_ylabel("Neuron: "+str(neuron_index))
plt.show()

"""
n_neurons = network._size
fig, axs = plt.subplots(3,3,figsize=(8, 6), sharex=True, sharey=True)

for neuron_index in range(n_neurons):
    col = math.floor(neuron_index/3)
    row = neuron_index % 3
    neuron_weights = network._weights[neuron_index]
    axs[row, col].plot(np.arange(len(neuron_weights)), neuron_weights, label=str(neuron_index))
    axs[row, col].set_title("Unit: "+str(neuron_index))
    if col == 0:
        axs[row, col].set_ylabel("Sequence values")
    if row == 2:
        axs[row, col].set_xlabel("Time")
plt.tight_layout()
plt.show()

n_neurons = network._size
for neuron_index in range(n_neurons):
    cluster_list = network.capture_objects[neuron_index]
    print(cluster_list)